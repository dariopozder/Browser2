{
    "name": "Native",
    "type": "dom",
    "deps": [],
    "apps": {
        "WebSearch": {
            "name": "WebSearch",
            "brands": [
                "Native",
                "All"
            ],
            "deps": [],
            "description": "",
            "folder": {
                "WebSearch.js": "\"@function:function WebSearch() {\\n    let app = this, providers = [\\n        \\n        \\n      {\\n            'name': 'Google',\\n            'url': 'https://google.com/search?q=',\\n            'parseResults': false\\n        },{\\n        'name': 'fMovies',\\n        'url': 'https://fmoviesz.to/filter?keyword=',\\n        'parseResults': false\\n    },{\\n        'name': 'HuggingFace',\\n        'url': 'https://huggingface.co/search/full-text?q=',\\n        'parseResults': false\\n    },{\\n        'name': 'Warp',\\n        'url': 'https://warp.bemjax.com/blog/?s=',\\n        'parseResults': false\\n    },\\n        {\\n            'name': 'Gmail',\\n            'url': 'https://mail.google.com/mail/u/0/#search/',\\n            'parseResults': false\\n        },\\n \\n        {\\n            'name': 'Youtube',\\n            'url': 'https://youtube.com/search?q=',\\n            'parseResults': false\\n        },\\n        {\\n            'name': 'IMDB',\\n            'url': 'https://www.imdb.com/find/?q=',\\n            'parseResults': false\\n        },\\n        {\\n            'name': '123movies',\\n            'url': 'https://123moviestv.net/search/',\\n            'parseResults': false\\n        }\\n        ,    {\\n            'name': 'PirateBay',\\n            'url': 'https://thepiratebay.party/search/',\\n            'parseResults': false\\n        }\\n        \\n       \\n        \\n        ], provider;\\n    function go() {\\n        provider = providers[app.el.querySelector('select').value];\\n        let str = app.el.querySelector('input').value;\\n        if (str.trim().startsWith('https://') || str.trim().startsWith('http://')) {\\n            warp.tab(str.trim());\\n        } else\\n            warp.tab(provider.url + str);\\n    }\\n    this.inspect = function (subject) {};\\n    this.init = function () {\\n        app.html(`\\n            <select></select>\\n            <input class=\\\"c7\\\" type=\\\"text\\\"/>\\n            <button class=\\\"c1 clear\\\">\\n            <svg  class=\\\"default icon\\\">\\n            <use href=\\\"#icon-search\\\"></use>\\n            </svg>\\n            </button>\\n            `);\\n        app.el.querySelector('input').addEventListener('keydown', function (event) {\\n            if (event.keyCode === 13)\\n                go();\\n        });\\n        app.el.querySelector('button').addEventListener('click', function (event) {\\n            go();\\n        }); app.el.querySelector('input').addEventListener('click', function (event) {\\n            this.select();\\n        });\\n        let sel = app.el.querySelector('select');\\n        providers.forEach(function (p, index) {\\n            let opt = warp.dom.node('option', {}, {\\n                value: index\\n            });\\n            opt.textContent = p.name;\\n            sel.append(opt);\\n        });\\n        provider = providers[0];\\n    };\\n}\""
            },
            "default": true
        },
        "Capture": {
            "name": "Capture",
            "brands": [
                "Native"
            ],
            "deps": [],
            "description": "",
            "folder": {
                "Capture.js": "\"@function:function Capture() {\\n    let app = this;\\n    this.inspect = function (subject) {\\n    };\\n    this.init = function () {\\n        app.el.append(warp.gui.buttons({\\n            capture: function () {\\n                native.call('Capture', []).then(byteArray => {\\n                    console.log(byteArray.length / 4);\\n                    new ImageData(Uint8ClampedArray.from(byteArray), 2000);\\n                });\\n            }\\n        }));\\n    };\\n}\""
            }
        },
        "Search": {
            "name": "Search",
            "brands": [
                ""
            ],
            "deps": [],
            "description": "",
            "folder": {
                "Search.js": "\"@function:function Search() {\\n        let app = this;\\n        let SearchResults;\\n        let timeout, typingWaitTime = 500, lastText = '';\\n        this.inspect = function (subject) {\\n        };\\n        function doWebSearch(str) {\\n            if (str.trim().startsWith('https://') || str.trim().startsWith('http://') || str.trim().startsWith('arweave://')|| str.trim().startsWith('ar://')) {\\n                warp.native.invoke(\\\"Tabs\\\" , \\\"Create\\\" , [\\n                \\n                     'tab' + Math.random(),  \\n                    str.trim(),\\n                    'search'\\n                ]);\\n            } else\\n                warp.native.invoke(\\\"Tabs\\\" , \\\"Create\\\" , [  'search' + Math.random() , 'https://google.com/search?q=' + query('input.warp-search').value,  'search'])\\n  \\n         }\\n        function event(el, type, listener) {\\n            el.addEventListener(type, listener);\\n        }\\n        function query(el) {\\n            return document.querySelector(el);\\n        }\\n        app.init = function () {\\n            /*\\n               function setupAppGui() {\\n                let collapsed, dom = query('div.search');\\n                warp.app('SearchResults').then(loadedApp => {\\n                    SearchResults = loadedApp;\\n                    SearchResults.hide();\\n                  \\n                    function collapse() {\\n                        gsap.to(dom, {\\n                            opacity: 0.5,\\n                            ease: Back.easeOut,\\n                            duration: 0.3,\\n                            onComplete: function () {\\n                                app.win.height(100);\\n                                dom.style.bottom = '5px';\\n                                query('input').classList.add('sm');\\n                                query('button.go').classList.add('sm');\\n                            }\\n                        });\\n                        background('rgba(0,0,0,0)');\\n                        app.win.toBack();\\n                        query('button.collapse').classList.add('hidden');\\n                        query('.published').classList.add('hidden');\\n                        collapsed = true;\\n                    }\\n                    function createPublishedGUI() {\\n                        let published = [\\n                            {\\n                                name: 'Arweave',\\n                                desc: 'arweave wallet app',\\n                                profile: 100000001,\\n                                layout: 'https://bemjax.com/storage/profiles/_1/_0/_0/100000109/public/ArWeave.layout'\\n                            },\\n                            {\\n                                name: 'HRast',\\n                                desc: 'HR assesment tool',\\n                                profile: 100000001,\\n                                layout: 'https://bemjax.com/storage/profiles/_1/_0/_0/100000110/public/HRast.layout'\\n                            },\\n                            {\\n                                name: 'Console',\\n                                desc: 'Warp console',\\n                                profile: 100000001,\\n                                show: function () {\\n                                    warp.console.show();\\n                                }\\n                            },\\n                            {\\n                                name: 'Native API\\\\'s',\\n                                desc: 'Native testing',\\n                                profile: 100000001,\\n                                show: function () {\\n                                    warp.console.show();\\n                                }\\n                            }\\n                        ];\\n                        let el = query('.search .published');\\n                        function parse(data) {\\n                            let div = warp.dom.node('div', {}, {\\n                                class: 'inline-block m10 tl',\\n                                style: 'width:150px'\\n                            });\\n                            div.innerHTML = `\\n                    <h3 style=\\\"text-transform:uppercase\\\" >${ data.name }</h3>\\n                    <p>${ data.desc }</p>\\n                    <button class=\\\"sm\\\">Show</button>\\n                    `;\\n                            if (data.layout) {\\n                                div.querySelector('button').addEventListener('click', async function () {\\n                                    let f = await fetch(data.layout);\\n                                    f = await f.text();\\n                                    f = {\\n                                        name: 'Native.layout',\\n                                        path: 'layouts/Native.layout',\\n                                        drive: false,\\n                                        data: f\\n                                    };\\n                                    new Warp.Manager(f);\\n                                });\\n                            } else\\n                                div.querySelector('button').addEventListener('click', async function () {\\n                                    data.show();\\n                                });\\n                            el.append(div);\\n                        }\\n                        published.forEach(parse);\\n                    }\\n                    function background(c) {\\n                        app.win.el.style.backgroundColor = c;\\n                        app.win.content.style.backgroundColor = c;\\n                        app.win.body.style.backgroundColor = c;\\n                    }\\n                    event(query('button.collapse'), 'click', collapse);\\n                    window.addEventListener('resize', function () {\\n                        app.win.width(warp.dom.width());\\n                        let rect = query('input').getBoundingClientRect();\\n                        //   warp.app(\\\"SearchResults\\\").then(SearchResults=>{\\n                        SearchResults.win.x(rect.x);\\n                        SearchResults.win.y(rect.y + 50);\\n                    });\\n                    app.win.height(600);\\n                    app.win.y(0);\\n                    app.win.width(warp.dom.width());\\n                    app.win.options('headless', true);\\n                    app.show();\\n                    background('rgb(25,25,25)');\\n                    app.win.restore();\\n                    app.win.x(0);\\n                    app.win.y(0);\\n                    app.win.el.classList.remove('inspector');\\n                    app.win.el.style.boxShadow = 'none';\\n         \\n                    createPublishedGUI();\\n                });\\n            }\\n            */\\n            warp.app('SearchResults').then(loadedApp => {\\n                SearchResults = loadedApp;\\n                SearchResults.hide();\\n                let input = query('input.warp-search');\\n                //if not hre input means were host\\n                if(!input)return\\n                let clearButton = query('.clearinput');\\n                event(input, 'keypress', e => {\\n                    if (e.keyCode === 13) {\\n                        doWebSearch(input.value);\\n                        return;\\n                    }\\n                    lastText = input.value;\\n                    clearTimeout(timeout);\\n                    timeout = setTimeout(function () {\\n                        if (input.value == lastText || lastText.length < 2 || !Boolean(lastText) || lastText == '') {\\n                        } else\\n                            SearchResults.inspect(lastText);\\n                        //just in case\\n                        clearTimeout(timeout);\\n                        timeout = false;\\n                    }, typingWaitTime);\\n                });\\n                event(input, 'click', e => {\\n                    warp.dom.enable(clearButton);\\n                    let rect = input.getBoundingClientRect();\\n                    SearchResults.win.x(rect.x);\\n                    SearchResults.win.y(rect.y + 50);\\n                    SearchResults.show().then(function () {\\n                        setTimeout(function () {\\n                            input.select();\\n                        }, 200);\\n                    });\\n                });\\n                event(input, 'blur', e => {\\n                });\\n                event(clearButton, 'click', e => {\\n                    input.value = '';\\n                    warp.app(\\\"SearchResults\\\").then(app=>app.hide().then())\\n                    warp.dom.disable(clearButton);\\n                });\\n                event(query('button.go'), 'click', e => {\\n                    doWebSearch(input.value);\\n                });\\n                window.addEventListener('resize', function () {\\n                    let rect = input.getBoundingClientRect();\\n                    SearchResults.win.x(rect.x);\\n                    SearchResults.win.y(rect.y + 50);\\n                });\\n            });\\n        };\\n    }\""
            }
        },
        "Published": {
            "name": "Published",
            "brands": [],
            "deps": [],
            "description": "",
            "folder": {
                "Published.js": "\"@function:function Published() {\\n        let app = this;\\n        this.inspect = function (subject) {\\n        };\\n        function background(c) {\\n            app.win.el.style.backgroundColor = c;\\n            app.win.content.style.backgroundColor = c;\\n            app.win.body.style.backgroundColor = c;\\n        }\\n        app.init = async function () {\\n            app.win.height(600);\\n            app.win.y(0);\\n            app.win.width(warp.dom.width());\\n            app.el.innerHTML = `\\n        <div class=\\\"tc mmd\\\">\\n            <div class=\\\"tl inline-block mla mra\\\">\\n            Published\\n            </div>\\n        </div>`;\\n            app.win.options('headless', true);\\n            app.show();\\n            background('rgb(35,35,35)');\\n            app.win.restore();\\n            app.win.x(0);\\n            let search = await warp.app('Native.Search');\\n            app.win.y(search.win.height());\\n            app.win.el.classList.remove('inspector');\\n            app.win.el.style.boxShadow = 'none';\\n        };\\n    }\""
            }
        },
        "Update": {
            "name": "Update",
            "brands": [
                "All"
            ],
            "deps": [],
            "description": "",
            "folder": {
                "Update.js": "\"@function:function Update() {\\n    let app = this;\\n    this.inspect = function (subject) {}\\n    this.init = function () {\\n        app.html(\\\"<button>Update</button>\\\");\\n        app.event(app.query(\\\"button\\\"), \\\"click\\\", function(){   \\n            warp.invoke(\\\"Installation\\\",\\\"Update\\\",[]).then(res=>alert('Update finished'))\\n        });\\n    }\\n}\""
            }
        },
        "SearchResults": {
            "name": "SearchResults",
            "brands": [],
            "deps": [],
            "description": "",
            "folder": {
                "SearchResults.js": "\"@function:function SearchResults() {\\n        let app = this, searches = [\\n                {\\n                    name: 'AppStore',\\n                    desc: 'Searches published apps',\\n                    html: `\\n                        <small class=\\\"op8\\\">Results for search for apps published on App Store</small><br>\\n            `,\\n                    events: function (el, search) {\\n                    },\\n                    fun: async function (text) {\\n                        const rawResponse = await fetch('https://bemjax.com/published/search.php', {\\n                            method: 'POST',\\n                            body: text\\n                        });\\n                        return JSON.parse(await rawResponse.text());\\n                    },\\n                    item: function (data, el, query) {\\n                        let publishedApp;\\n                        el.addEventListener('click', async function () {\\n                            let man = await warp.layout(data.layout);\\n                            if (!man) {\\n                                let result = await warp.get(data.url);\\n                                //show and inspect result\\n                                let code = await result.text();\\n                                let f = {\\n                                    name: data.layout + '.layout',\\n                                    path: data.layout + '.layout',\\n                                    drive: false,\\n                                    data: code\\n                                };\\n                                new Warp.Manager(f);\\n                                publishedApp = await warp.app(data.layout + '.' + data.app);\\n                                publishedApp.show();\\n                            } else {\\n                                publishedApp = await warp.app(data.layout + '.' + data.app);\\n                                publishedApp.show();\\n                            }\\n                            app.hide();\\n                        });\\n                        el.innerHTML = `\\n                        <div class=\\\"hlg item w100 lg small\\\">\\n                        <div class=\\\"round image m10   mb0 fl hsm\\\" style=\\\"margin-top:8px; background-color : lightgrey; min-width:35px; min-height:35px; max-width:55px; max-height:55px; background-image: url('${ data.image }')\\\"></div>\\n                        <div class=\\\"m5 fl inline-block mt20\\\" style=\\\"width :240px; pointer-events:none\\\">  <div class=\\\"tlg strong mb5\\\">${ data.name }</div>  ${ data.tagline }</div>\\n                        <div class=\\\"m5 fl inline-block  mt10\\\" style=\\\"width :320px; pointer-events:none\\\">  ${ data.description }</div>\\n                        <div class=\\\"m5 fl inline-block  mt10\\\" style=\\\"width :150px; pointer-events:none\\\"> \\n                            <small class=\\\"op6\\\">PRICE : </small>${ data.price }\\n                            <br><small class=\\\"op6\\\">PUBLISHER : </small> ${ data.profile }\\n                            <br><small class=\\\"op6\\\"> ADMINS : </small> ${ data.admins }\\n                         \\n                        </div>\\n                        <div class=\\\"m5 fl inline-block\\\" style=\\\"width :150px; pointer-events:none\\\">\\n                            <br><small class=\\\"op6\\\"> SIZE : </small> ${ data.size }\\n                            <br><small class=\\\"op6\\\"> VERSION : </small>${ data.v }\\n                         </div>\\n                         </div>\\n                        `;\\n                        return el;\\n                    }\\n                },\\n                {\\n                    name: 'Profiles',\\n                    desc: 'Searches Warp Personal and Teams profiles',\\n                    html: '<small class=\\\\'op8\\\\'>Results for Warp Personal and Teams profiles search</small><br>',\\n                    events: function (el, search) {\\n                    },\\n                    fun: async function (text) {\\n                        let res = await warp.api.call('search/search/', {\\n                            text: text,\\n                            entity: 'profiles'\\n                        });\\n                        return res;\\n                    },\\n                    item: function (profile, el, query) {\\n                        //cash...search should be in ist app so we can cash there\\n                        localStorage['profiles.' + profile.id] = JSON.stringify(profile);\\n                        return warp.gui.profile.list(profile.id, false, function () {\\n                            main.profile.load(profile);\\n                            main.profile.show();\\n                        });\\n                    }\\n                },\\n                {\\n                    name: 'Google (without session)',\\n                    desc: 'Searches Google through scraping with no regard to CORS',\\n                    html: '<small class=\\\\'op8\\\\'>Google Results</small><br>',\\n                    events: function (el, search) {\\n                    },\\n                    fun: async function (text) {\\n                        let res = [{ query: text }];\\n                        return res;\\n                    },\\n                    item: function (data, el, query) {\\n                        function parseSearch(doc) {\\n                            let els = doc.querySelectorAll('#main h3');\\n                            let resOb = [];\\n                            els.forEach(function (el, index) {\\n                                let url = el.parentNode.parentNode.parentNode.getAttribute('href');\\n                                url = new URLSearchParams(url);\\n                                url = url.get('/url?q');\\n                                resOb.push({\\n                                    caption: el.textContent,\\n                                    text: el.textContent,\\n                                    url: url\\n                                });\\n                            });\\n                            return resOb;\\n                        }\\n                        el.innerHTML = `\\n                        <div class=\\\"m10 mt20 txl\\\">\\n                            Search for <span class=\\\"tb ti\\\">\\\"${ query }\\\"</span>\\n                        </div>`;\\n                        el.addEventListener('click', function () {\\n                            warp.invoke('Network', 'FetchText', ['https://google.com/search?q=' + query]).then(async function (blob) {\\n                                //  let htmlString = await blob.text();\\n                                let htmlString = blob;\\n                                console.log(htmlString);\\n                                toast(htmlString);\\n                                var doc = warp.dom.node('html');\\n                                doc.innerHTML = htmlString;\\n                                let res = parseSearch(doc);\\n                                res.forEach(function (single) {\\n                                    let resEl = warp.dom.node('div');\\n                                    resEl.style.height = '35px';\\n                                    resEl.style.borderTopLeftRadius = '15px';\\n                                    resEl.style.borderBottomLeftRadius = '15px';\\n                                    resEl.classList.remove('small');\\n                                    resEl.padding = '10px';\\n                                    resEl.innerHTML = `\\n                                <a href=\\\"#\\\" onclick='event.preventDefault(); window.native.invoke(\\\"Tabs\\\",\\\"Create\\\",[\\\"${ data.url }\\\", \\\"search\\\"+Math.random(),\\\"search\\\"])'  >${ data.caption }</a>\\n                        `;\\n                                    el.append(resEl);\\n                                });\\n                            });\\n                        });\\n                        return el;\\n                    }\\n                },\\n                {\\n                    name: 'Movies',\\n                    desc: 'Searches 123Movies through scraping with warp.get',\\n                    html: '<small class=\\\\'op8\\\\'>Movies search results</small><br>',\\n                    events: function (el, search) {\\n                    },\\n                    fun: async function (text) {\\n                        let res = [{ query: text }];\\n                        return res;\\n                    },\\n                    item: function (data, el, query) {\\n                        function parseSearch(doc) {\\n                            let els = doc.querySelectorAll('.flw-item');\\n                            let resOb = [];\\n                            els.forEach(function (el, index) {\\n                                let url = el.parentNode.parentNode.parentNode.getAttribute('href');\\n                                url = new URLSearchParams(url);\\n                                url = url.get('/url?q');\\n                                resOb.push({\\n                                    year: el.querySelector('.fdi-item').textContent,\\n                                    name: el.querySelector('.film-name').textContent,\\n                                    url: 'https://123moviestv.net' + el.querySelector('.film-name a').getAttribute('href'),\\n                                    image: el.querySelector('.film-poster img').getAttribute('src')\\n                                });\\n                            });\\n                            return resOb;\\n                        }\\n                        el.innerHTML = `\\n                        <div class=\\\"m10 mt20 txl\\\">\\n                            Search for <span class=\\\"tb ti\\\">\\\"${ query }\\\"</span>\\n                            <button class=\\\"xs\\\"> Go </button>\\n                        </div>\\n                        <div class=\\\"res\\\">\\n                          \\n                        </div>\\n                        `;\\n                        el.querySelector('button').addEventListener('click', function () {\\n                            warp.dom.disable(el);\\n                            warp.get('https://123moviestv.net/search/' + query).then(async function (blob) {\\n                                let htmlString = await blob.text();\\n                                //toast(html)\\n                                var doc = warp.dom.node('html');\\n                                doc.innerHTML = htmlString;\\n                                let res = parseSearch(doc);\\n                                console.log(res);\\n                                warp.dom.enable(el);\\n                                res.forEach(function (single) {\\n                                    let resEl = warp.dom.node('div');\\n                                    resEl.style.height = '35px';\\n                                    resEl.padding = '10px';\\n                                    resEl.innerHTML = `\\n                                <a href=\\\"#\\\" onclick='event.preventDefault(); warp.tab(\\\"${ single.url }\\\")'>${ single.name }-${ single.year }</a>\\n                        `;\\n                                    el.querySelector('.res').append(resEl);\\n                                });\\n                            });\\n                        });\\n                        return el;\\n                    }\\n                }    /*,\\n                {\\n                    name: 'Google (session in Tab)',\\n                    desc: 'Searches Google through scraping the rendered DOM in a Tab',\\n                    html: '<small class=\\\\'op8\\\\'>Google Results</small><br>',\\n                    events: function (el, search) {\\n                    },\\n                    fun: async function (text) {\\n                        let tab = await warp.tab('https://google.com/search?q=' + text);\\n                        let code = `\\nlet els = document.querySelectorAll(\\\"#main  h3\\\");\\nlet res = [];\\nels.forEach(function(el, index) {\\n    res.push({\\n        el: el,\\n        caption: el.textContent,\\n        text: el.textContent,\\n        url: el.parentNode.getAttribute(\\\"href\\\"),\\n        image : el.parentNode.querySelector(\\\"img\\\").getAttribute(\\\"src\\\")\\n    })\\n})\\nreturn res;\\n`;\\n                        let result = await tab.eval(code);\\n                        result = JSON.parse(result);\\n                        return Object.values(result);\\n                    },\\n                    item: function (data,el, q) {\\n                            let d = warp.dom.node(\\\"div\\\");\\n    d.innerHTML = `\\n        <img src=\\\"${data.image}\\\"> \\n        <a href=\\\"${data.url}\\\" source=\\\"_blank\\\">${data.caption}</a>\\n    `;\\n    el.append(d);\\n                        return el;\\n                    }\\n                }*/\\n            ], active = [];\\n        let lastText = '';\\n        this.inspect = function (subject) {\\n            if (!subject)\\n                return;\\n            lastText = subject;\\n            doWarpSearch(subject);\\n        };\\n        function triggerSizeChange() {\\n            let rect = app.win.el.getBoundingClientRect();\\n            warp.trigger('GUI.WindowMoved', {\\n                id: app.win.name,\\n                x: parseInt(rect.x),\\n                y: parseInt(rect.y),\\n                width: parseInt(rect.width),\\n                height: parseInt(rect.height)\\n            });\\n        }\\n        function doWarpSearch(str) {\\n            if (str.length < 3) {\\n                return;\\n                app.win.hide();\\n            } else\\n                app.win.show();\\n            active.forEach(async function (search) {\\n                let results = await search.fun(str);\\n                let resultsEl = search.drawer.body.querySelector('.results');\\n                resultsEl.innerHTML = '';\\n                results.forEach(function (single) {\\n                    let el = warp.dom.node('div', {\\n                        mouseenter: function () {\\n                            this.style.opacity = '1';\\n                        },\\n                        mouseleave: function () {\\n                            this.style.opacity = '0.8';\\n                        }\\n                    }, {\\n                        class: 'm5 ml0 inline-block',\\n                        style: 'opacity:0.9;  border-radius:2px; '\\n                    });\\n                    resultsEl.append(search.item(single, el, str));\\n                });\\n                triggerSizeChange();\\n            });\\n            app.show();\\n        }\\n        app.init = function () {\\n            function setupAppGui() {\\n                function background(c) {\\n                    app.win.el.style.backgroundColor = c;\\n                    app.win.content.style.backgroundColor = c;\\n                    app.win.body.style.backgroundColor = c;\\n                    app.win.el.style.borderTop = 'none';\\n                    app.win.content.style.borderTop = 'none';\\n                    app.win.body.style.borderTop = 'none';\\n                }\\n                app.win.height('auto');\\n                app.win.width(400);\\n                app.win.options('headless', true);\\n                app.win.options('close', true);\\n                app.win.options('activateOnShow', false);\\n                background('rgb(20, 20, 20)');\\n                app.win.restore();\\n                app.win.el.classList.remove('inspector');\\n            }\\n            function setupDrawers() {\\n                var prefs = main.preferences.get('Search', 'Active');\\n                console.log(prefs);\\n                function createDrawer(search) {\\n                    search.drawer = warp.gui.drawer(search.name, {\\n                        //name : safeName(search.name),\\n                        usePrefs: true,\\n                        class: 'mt0 mb0 dark',\\n                        beforeOpen: function (drawer) {\\n                            //activate search, parse the search dom and events\\n                            //toast(search.name + ' is now active');\\n                            drawer.body.innerHTML = search.html + '<div class=\\\"results mt10\\\"></div>';\\n                            search.events(drawer.body, search);\\n                            if (!active.includes(search))\\n                                active.push(search);\\n                            // toast(lastText);\\n                            search.fun(lastText).then(results => {\\n                                let resultsEl = drawer.body.querySelector('.results');\\n                                results.forEach(data => {\\n                                    let el = warp.dom.node('div', {\\n                                        mouseenter: function () {\\n                                            this.style.opacity = '1';\\n                                        },\\n                                        mouseleave: function () {\\n                                            this.style.opacity = '0.8';\\n                                        }\\n                                    }, {\\n                                        class: 'hlg m5 ml0  ripple item md inline-block small',\\n                                        style: 'opacity:0.9;  border-radius:2px; border-top-left-radius:32px; border-bottom-left-radius:32px'\\n                                    });\\n                                    resultsEl.append(search.item(data, el, lastText));\\n                                });\\n                                triggerSizeChange();\\n                            });\\n                        },\\n                        onOpen: function (drawer) {\\n                            triggerSizeChange();\\n                            let searches = [];\\n                            active.forEach(function (search) {\\n                                searches.push(search.name);\\n                            });\\n                            main.preferences.set('Search', 'Active', searches);\\n                        },\\n                        onClose: function (drawer) {\\n                            let searches = [];\\n                            active.forEach(function (s, index) {\\n                                searches.push(s.name);\\n                                if (s.name == search.name)\\n                                    active.splice(index, 1);\\n                            });\\n                            triggerSizeChange();\\n                            main.preferences.set('Search', 'Active', searches);\\n                        }\\n                    });\\n                    search.drawer.body.classList.add('p10');\\n                    search.drawer.body.classList.add('tl');\\n                    search.drawer.el.classList.add('block');\\n                    app.query('.results').append(search.drawer.el);\\n                    if (prefs && prefs.includes(search.name)) {\\n                        setTimeout(function () {\\n                            try {\\n                                search.drawer.open();\\n                            } catch (e) {\\n                            }\\n                        }, 500);\\n                    }\\n                }\\n                searches.forEach(function (search) {\\n                    createDrawer(search);\\n                });\\n            }\\n            app.el.innerHTML = `\\n        <div class=\\\"results p5 pl10\\\">\\n        </div>\\n        `;\\n            setupAppGui();\\n            setupDrawers();\\n        };\\n    }\""
            }
        },
        "Reference": {
            "name": "Reference",
            "brands": [],
            "deps": [],
            "description": "",
            "folder": {
                "Reference.js": "\"@function:function Reference() {\\n        let app = this;\\n        let meta = {\\n            Native: {\\n                desc:`\\n                Native classes methods exposed as a low level API. \\n                <br>usage is : \\n                <br> await warp.native.invoke(\\\\'ClassName\\\\', \\\\'MethodName\\\\', [\\\\'arg1\\\\',2,\\\\'arg3\\\\'])\\n                <br> Note : capitalised CamelCase for the native methods and classes`,\\n                endpoints: {\\n                \\n                    'Tabs': {\\n                        desc: 'Offers control over native Tabs',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'Windows': {\\n                        desc: 'Control over native Windows',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'Network': {\\n                        desc: 'Network helpers',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },       \\n                    'Drives': {\\n                        desc: 'Handling of drives',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    }, \\n                    'Gui': {\\n                        desc: 'Resolution, pointer, screens etc',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },     \\n                    'Endpoints': {\\n                        desc: 'Serves helper methods for this API',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },  \\n                    'Installation': {\\n                        desc: 'Update etc',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },  \\n                    'Instance': {\\n                        desc: 'IsAdmin, etc',\\n                        inheritesFrom: false,\\n                        usage:false, \\n                        properties: {},\\n                        methods: {}\\n                    },\\n                },\\n                usageTemplate: function (endpoint, method, args) {\\n                    let argsString = '';\\n                    each(args, function (argName, argType) {\\n                        if(argName==\\\"messageId\\\")return;\\n                        let name = argType + '  ' + argName;\\n                        if (name==\\\"String  messageId\\\") name==\\\"\\\";\\n                        if (name==\\\"String  uri\\\" || name ==\\\"String  url\\\") name = \\\"https://google.com/search?q=bemjax\\\"\\n                        argsString += ' \\\"' + name + '\\\" , ';\\n                    });\\n                    argsString = argsString.substring(0, argsString.length - 2);\\n                    argsString = argsString.replace(',  \\\"String  messageId\\\" ',\\\"\\\");\\n                    return `\\nlet start = performance.now();\\n//endpointName, methodName , argumentsArray ...change the arguments before commiting\\nlet result = await warp.invoke(\\\"${ endpoint }\\\" , \\\"${ method }\\\" , [${ argsString }]);\\n//show and inspect result\\ntoast(performance.now()-start + \\\" \\\\'${ method }\\\\' result : \\\" + JSON.stringify(result));\\nwarp.inspect(result);\\n`;\\n                }\\n            },\\n            Engine: {\\n                desc: 'Engine APIs and methods. Most of these are fast async scripting interfaces that , under the hood, use Constructors but they are async so they pack a lot of punch in as little as possible number of code characters',\\n                usage : false,\\n                endpoints: {\\n                    'warp': {\\n                        desc: 'Fast asyncronous API\\\\'s for scripting',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {\\n                            app: {\\n                                desc: 'Retrieves or creates an app',\\n                                usage:false, arguments: { 'appName': 'String' },\\n                                returnType: 'Object',\\n                                examples: [{\\n                                        title: 'Obtaining App reference from a loaded Layout',\\n                                        desc: 'You can pass the layout name in dot notation if you know the Layout in which app is located',\\n                                        code: `\\n                                    let app = await warp.app(\\\"Native.Reference\\\");\\n                                    app.show();\\n                                    `\\n                                    }]\\n                            },\\n                            inspect: {\\n                                desc: 'Triggers Inspection on all loaded Layouts',\\n                                usage:false, arguments: { 'subject': 'Object' },\\n                                returnType: 'Boolean',\\n                                examples: []\\n                            }\\n                        }\\n                    },\\n                    'warp.dom': {\\n                        desc: 'DOM middleware',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {\\n                            node: {\\n                                desc: 'creates a dom node',\\n                                usage:false, arguments: {\\n                                    'nodeName': 'String',\\n                                    'events': 'Object',\\n                                    'attributes': 'Object'\\n                                },\\n                                returnType: 'Object'\\n                            }\\n                        }\\n                    },\\n                    'warp.gui': {\\n                        desc: 'GUI manager',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {\\n                            'layer': {\\n                                desc: 'creates a GUI Layer',\\n                                usage:false, arguments: {\\n                                    'nodeName': 'String',\\n                                    'events': 'Object',\\n                                    'attributes': 'Object'\\n                                },\\n                                returnType: 'Object'\\n                            }\\n                        }\\n                    },\\n                    'warp.threads': {\\n                        desc: 'async API for Thread constructor',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {\\n                            create: {\\n                                desc: 'creates a JS Thread',\\n                                usage:false, arguments: {},\\n                                returnType: 'Object'\\n                            }\\n                        }\\n                    }\\n                },\\n                usageTemplate: function (endpoint, method, args) {\\n                    let argsString = '';\\n                    each(args, function (argName, argType) {\\n                        argsString += ' \\\"' + argType + '_' + argName + '\\\" , ';\\n                    });\\n                    argsString = argsString.substring(0, argsString.length - 2);\\n                    return `let result = await ${ endpoint }.${ method }(${ argsString });\\nwarp.inspect(result);\\n`;\\n                }\\n            },\\n            Constructors: {\\n                desc: 'Some of main Warp\\\\'s constructors',\\n                 usage : false,\\n                endpoints: {\\n                    'Drive': {\\n                        desc: 'Same simple and fast asyncronous filesystem API\\\\'s with different storage backends.',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {\\n                            read: {\\n                                desc: 'Retrieves or creates an app',\\n                                usage:false, arguments: {\\n                                    'path': 'String',\\n                                    'readAs': 'String'\\n                                },\\n                                returnType: 'String',\\n                                examples: [{\\n                                        title: 'Read a  file from your user private drive',\\n                                        desc: '',\\n                                        code: `let jsonString = await warp.user.private.read(\\\"test.json\\\");\\n                                    `\\n                                    }]\\n                            }\\n                        }\\n                    },\\n                    'Layout': {\\n                        desc: 'Warp\\\\'s container for packing Apps, Brands, Drives, Searches and FileTypes',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'Brand': {\\n                        desc: 'Definition of data compatibility tested with a simple function returning false/true',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'App': {\\n                        desc: 'A JS or c++ app runing in a window',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'FileType': {\\n                        desc: '',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'Tool': {\\n                        desc: 'Drawing tool for Display',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'File': {\\n                        desc: '',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'Folder': {\\n                        desc: '',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'Search': {\\n                        desc: 'Object that extends Warp\\\\'s search capabilities with custom, User defined Searches distributed in a Layout files',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'Bot': {\\n                        desc: '',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    }\\n                },\\n                usageTemplate: function (endpoint, method, args) {\\n                    let argsString = '';\\n                    each(args, function (argName, argType) {\\n                        argsString += ' \\\"' + argType + '_' + argName + '\\\" , ';\\n                    });\\n                    argsString = argsString.substring(0, argsString.length - 2);\\n                    return `let result = await ${ endpoint }.${ method }(${ argsString });\\nwarp.inspect(result);\\n`;\\n                }\\n            },\\n            Apps: {\\n                desc: 'These are all apps, inhereting from App but with a specialised GUI',\\n                endpoints: {\\n                    'App': {\\n                        desc: 'default app',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'Window': {\\n                        desc: 'GUI app runing on a Layer',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'Display': {\\n                        desc: 'Control used to display visual data and serve as mouse interface for User.',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'Manager': {\\n                        desc: 'Manages a Layout file and re-loading content. Also serves as API to a layout',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'DriveApp': {\\n                        desc: 'Manages a drive',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'ProfileApp': {\\n                        desc: '',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'Chat': {\\n                        desc: 'Reusable Chat GUI - suitable for chat, wall, bots etc.',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    }\\n                },\\n                 usage : false,\\n                usageTemplate: function (endpoint, method, args) {\\n                    let argsString = '';\\n                    each(args, function (argName, argType) {\\n                        argsString += ' \\\"' + argType + '_' + argName + '\\\" , ';\\n                    });\\n                    argsString = argsString.substring(0, argsString.length - 2);\\n                    return `let result = await ${ endpoint }.${ method }(${ argsString });\\nwarp.inspect(result);\\n`;\\n                }\\n            },\\n            Drives: {\\n                desc: 'These are not constructor API\\\\'s, Drive constructor methods and API are in the Constructors. These are different drives that inherit the same Drive API but with different storage backend and initial parameters in options object',\\n                endpoints: {\\n                    'Public': {\\n                        desc: 'A profile public Drive, visible in read only mode to all users if the profile is public',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'Private': {\\n                        desc: 'A profiles private drive. Visible in read/write to owner and read-only to team members',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'Http': {\\n                        desc: 'Drive through http tunnel',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'Object': {\\n                        desc: 'Virtual with scope in a JS object',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'RAM': {\\n                        desc: 'Native RAM drive through a native driver',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'Native': {\\n                        desc: '',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    },\\n                    'Zip': {\\n                        desc: 'Mounts a *.zip file as a Drive API',\\n                        inheritesFrom: false,\\n                        usage:false, properties: {},\\n                        methods: {}\\n                    }\\n                },\\n                 usage : false,\\n                usageTemplate: function (endpoint, method, args) {\\n                    let argsString = '';\\n                    each(args, function (argName, argType) {\\n                        argsString += ' \\\"' + argType + '_' + argName + '\\\" , ';\\n                    });\\n                    argsString = argsString.substring(0, argsString.length - 2);\\n                    return `let result = await ${ endpoint }.${ method }(${ argsString });\\nwarp.inspect(result);\\n`;\\n                }\\n            },\\n            \\n        };\\n        let apiData = {\\n            Native: null,\\n            Engine: meta.Engine.endpoints,\\n            Constructors: meta.Constructors.endpoints,\\n            Apps: meta.Apps.endpoints,\\n            Drives: meta.Drives.endpoints\\n        };\\n        let currentApi = 'Native';\\n        this.inspect = function (subject) {\\n            if (!subject)\\n                return;\\n        };\\n        app.init = async function () {\\n            var render = {\\n                tab: async function (tabName) {\\n                    let container = warp.dom.node('div', {}, { class: 'hidden api-' + tabName });\\n                    container.innerHTML = '<p class=\\\"tl small op7 m5\\\">' + meta[tabName].desc + '</p>';\\n                    //general usage example of whole API, prob will not be used.\\n                    //each endpoint, and methods have one also\\n                    if(meta[tabName].usage)\\n                    container.append(render.usage(meta[tabName].usage));\\n                    let endpoints = apiData[tabName];\\n                    each(endpoints, function (name, data) {\\n                        render.drawer(tabName, name, data, container);\\n                    });\\n                    app.el.querySelector('.body').append(container);\\n                },\\n                drawer: function (apiName, endpointName, endpoint, tabContainer) {\\n                    endpoint.drawer = warp.gui.drawer('<strong>' + endpointName + '</strong> : <small class=\\\\'op4\\\\'>' + Object.keys(endpoint.methods).length + ' methods, '  + Object.keys(endpoint.properties).length +\\n                    ' properties</small>', {\\n                        usePrefs: true,\\n                        class: 'mt0 mb0 dark',\\n                        size: 'md',\\n                        beforeOpen: function (drawer) {\\n                            drawer.body.innerHTML = '<p class=\\\"tl small op7 m5\\\">' + meta[apiName].endpoints[endpointName].desc + '</p>';\\n                            if(endpoint.usage)\\n                            drawer.body.append(render.usage(endpoint.usage))\\n                            each(endpoint.methods, function (methodName, methodData) {\\n                                if (methodName != 'drawer') {\\n                                    let el = render.method(apiName, endpointName, methodName, methodData);\\n                                    drawer.body.append(el);\\n                                }\\n                            });\\n                        },\\n                        onClose: function (drawer) {\\n                        }\\n                    });\\n                    endpoint.drawer.body.classList.add('p10');\\n                    endpoint.drawer.body.classList.add('tl');\\n                    endpoint.drawer.el.classList.add('block');\\n                    tabContainer.append(endpoint.drawer.el);\\n                },\\n                usage : function(code){\\n                    let el = warp.dom.node(\\\"p\\\",{click:function(){    \\n                        warp.console.show(code)\\n                    }},{class:\\\"tl small op7 m5\\\"})\\n                     el.innerHTML = '<strong>Usage :</strong> ' + meta[apiName].usage + '</p>';\\n                     return el;\\n                },\\n                method: function (apiName, endpointName, methodName, methodData) {\\n                    let item = warp.dom.node('div', {}, {\\n                        style: 'cursor:pointer',\\n                        class: 'ripple m5 mt10 mb20'\\n                    });\\n                    let argsString = '';\\n                    each(methodData.arguments, function (argName, argType) {\\n                        if(argName==\\\"messageId\\\")return;\\n                        argsString += '<small class=\\\\'op3\\\\'>' + argType + '</small> ' + argName + ' , ';\\n                    });\\n                    argsString = argsString.substring(0, argsString.length - 2);\\n                    item.innerHTML = `\\n                        ${ methodName } ( ${ argsString } ) <br>\\n                           <small class=\\\"op7\\\"> return type  : </small><small class=\\\"op3\\\">${ methodData.returnType }</small>\\n                    `;\\n                      if(methodData.usage)\\n                            item.append(render.usage(methodData.usage))\\n                    item.addEventListener('click', function () {\\n                        if(methodData.usage){\\n                            warp.console.show(methodData.usage)\\n                        } else \\n                        warp.console.show(meta[apiName].usageTemplate(endpointName, methodName, methodData.arguments));\\n                    });\\n                    return item;\\n                }\\n            };\\n            if (window.native)\\n                apiData.Native = await window.native.invoke('Endpoints', 'List', []);\\n            function setupAppGui() {\\n                app.el.classList.add('tl');\\n                app.el.innerHTML = `\\n            <div class=\\\"tabs tl mt-10\\\">\\n                <button class=\\\"m0 clear op4 inverted sm native\\\">Native</button>\\n                <span style=\\\"color:rgba(255,255,255,0.4)\\\">|</span>\\n                <button class=\\\"m0 clear op4 inverted sm engine\\\">Engine</button>\\n                <span style=\\\"color:rgba(255,255,255,0.4)\\\">|</span>\\n                <button class=\\\"m0 clear op4 inverted sm constructors\\\">Constructors</button>\\n                <span style=\\\"color:rgba(255,255,255,0.4)\\\">|</span>\\n                <button class=\\\"m0 clear op4 inverted sm apps\\\">Apps</button>\\n                <span style=\\\"color:rgba(255,255,255,0.4)\\\">|</span>\\n                <button class=\\\"m0 clear op4 inverted sm drives\\\">Drives</button>\\n            </div>\\n            <div class=\\\"body\\\"> \\n            </div>\\n            `;\\n                let buttons = app.el.querySelectorAll('button');\\n                buttons.forEach(function (button, index) {\\n                      if (!window.native && button.textContent==\\\"Native\\\")return\\n                    render.tab(button.textContent);\\n                    button.addEventListener('click', function () {\\n                        app.el.querySelector('.body .api-' + currentApi).classList.add('hidden');\\n                        app.el.querySelector('button.' + currentApi.toLowerCase()).classList.add('op4');\\n                        currentApi = button.textContent;\\n                        app.el.querySelector('.body .api-' + button.textContent).classList.remove('hidden');\\n                        button.classList.remove('op4');\\n                    });\\n                });\\n              \\n                if (!window.native){\\n                    warp.dom.disable(app.el.querySelector('button.native'));\\n                    buttons[1].click();\\n                } else buttons[0].click();\\n                function background(c) {\\n                    app.win.el.style.backgroundColor = c;\\n                    app.win.content.style.backgroundColor = c;\\n                    app.win.body.style.backgroundColor = c;\\n                }\\n                app.el.classList.add('p10');\\n                app.win.width(400);\\n                app.show();\\n                background('rgb(25,25,25)');\\n                app.win.restore();\\n                app.win.el.classList.remove('inspector');\\n            }\\n            setupAppGui();\\n        };\\n    }\""
            }
        },
        "Settings": {
            "name": "Settings",
            "brands": [],
            "deps": [],
            "description": "",
            "folder": {
                "Settings.js": "\"@function:function Settings() {\\n        let app = this;\\n        let GUI = {\\n            'cdn': {\\n                html: `\\n                            <h3>Update</h3>\\n                            Installed version <span class=\\\"iv op7\\\"></span> \\n                            <br>\\n                            Update version <span class=\\\"uv op7\\\"></span>\\n                            <button class=\\\"sm m5 fr mt-20 update\\\"> Update </button>\\n                            \\n                            <button class=\\\"xs m5 update-engine\\\"> Update Engine now</button>\\n                            <small class=\\\"op3 txs\\\">Notice : Engine gets updated on launch!</small>\\n                            <h3 class=\\\"mt20\\\">CDN</h3>\\n                            <p class=\\\"small mt20 op6\\\">The adress of CDN serving updates and engine files</p>\\n                            <input type=\\\"text\\\" class=\\\" sm\\\" style=\\\"width:280px\\\" /> \\n                            <button class=\\\"xs ml5 save\\\"> Save </button>`,\\n                events: {\\n                    'button.save': {\\n                        'click': function () {\\n                            warp.invoke('Installation', 'Settings', [\\n                                'cdn',\\n                                app.el.querySelector('.cdn input').value\\n                            ]);\\n                            toast('Saved');\\n                        }\\n                    },\\n                    'button.update': {\\n                        'click': function () {\\n                            warp.invoke('Installation', 'Update', []);\\n                            alert('Update is downloading, please wait....');\\n                        }\\n                    },\\n                    'button.update-engine': {\\n                        'click': async function () {\\n                            let t = toast('downloading', 10000);\\n                            await warp.invoke('Network', 'DownloadEngine', []);\\n                            t.destroy('Finished');\\n                        }\\n                    }\\n                },\\n                init: async function () {\\n                    app.el.querySelector('.cdn input').value = await warp.invoke('Installation', 'Settings', [\\n                        'cdn',\\n                        null\\n                    ]);\\n                    app.el.querySelector('.cdn .iv').innerHTML = await warp.invoke('Installation', 'InstalledVersion', []);\\n                    app.el.querySelector('.cdn .uv').innerHTML = await warp.invoke('Installation', 'UpdateVersion', []);\\n                }\\n            },\\n            'history': {\\n                html: `\\n                            <h3>History</h3>\\n                            <p class=\\\"small mt20 op6\\\">Cash folder location</p>\\n                            <input type=\\\"text\\\" class=\\\"history sm\\\" style=\\\"width:280px\\\" /> \\n                            <button class=\\\"xs ml5 history\\\"> Clear </button>`,\\n                events: {\\n                    'button.history': {\\n                        'click': function () {\\n                          /*  warp.invoke('Installation', 'Settings', [\\n                                'cdn',\\n                                app.el.querySelector('.cdn input').value\\n                            ]);\\n                            toast('Saved');*/\\n                        }\\n                    }\\n                   \\n                },\\n                init: async function () {\\n                  \\n                }\\n            },\\n            'drives': {\\n                html: `\\n                            <h3>Drives</h3>\\n                            Driver Installed  <span class=\\\"op7\\\"></span> \\n                            <p class=\\\"small mt20 op6\\\">IMDisk driver</p>\\n                            <button class=\\\"sm ml5 fr mt-20\\\"> Install Driver </button>\\n                            <p class=\\\"small mt20 op6\\\">Usage of virtual drives in Incognito mode requires Warp to be run as Administrator</p>\\n                           `,\\n                events: {\\n                    'button': {\\n                        'click': function () {\\n                         \\n                        }\\n                    }\\n                },\\n                init: async function () {\\n                  \\n                }\\n            },     'scaling': {\\n                html: `\\n  \\n                            <div class=\\\"\\\">Gui scaling <span class=\\\"sc\\\"></span></div>\\n                                 `,\\n                events: {\\n                  \\n                },\\n                init: async function () {\\n                     app.el.querySelector('.sc').innerHTML = await warp.invoke('Gui', 'Scaling', []);\\n                 \\n                }\\n            }\\n        };\\n        app.inspect = function (subject) {\\n        };\\n        app.init = function () {\\n        \\n            function renderGUI() {\\n                function parse() {\\n                    let final = '';\\n                    each(GUI, function (name, part) {\\n                        final = final + '<div class=\\\"' + name + ' tl m10 mtxl mbmd\\\">' + part.html + '</div>';\\n                    });\\n                    app.el.innerHTML = final;\\n                    each(GUI, function (name, part) {\\n                        each(part.events, function (selector, event) {\\n                            app.el.querySelector(selector).addEventListener(Object.keys(event)[0], Object.values(event)[0]);\\n                        });\\n                        part.init();\\n                    });\\n                }\\n                parse();\\n            }\\n            setupWin(app);\\n            renderGUI();\\n        };\\n    }\""
            }
        },
        "HostWin": {
            "name": "HostWin",
            "brands": [],
            "deps": [],
            "description": "",
            "folder": {
                "HostWin.js": "\"@function:function HostWin() {\\n        let app = this;\\n        let barEl = warp.dom.node('div',{},{style:\\\"position:fixed; width:100%; left:0px; top:0px; min-height:20px; min-width:100px\\\"});\\n        let resizeListener;\\n        this.inspect = function (subject) {\\n        };\\n        async function setupHostWin() {\\n\\n            let hostWinId = warp.native.hostWin.id;\\n            if(hostWinId==\\\"Warp\\\"){\\n                //load search app and etc\\n            }else{  \\n                document.body.style.backgroundColor = \\\"rgba(0,0,0,0)\\\";\\n                warp.app(\\\"AddressBar\\\");\\n            }\\n            warp.gui.layers.main.el.prepend(barEl);\\n            let parent = barEl.querySelector('.bar');\\n            function q(sel) {\\n                return parent.querySelector(sel);\\n            }\\n            function resize() {\\n                let parW = warp.dom.width(parent);\\n                let imageW = warp.dom.width(q('.image'));\\n                let capW = warp.dom.width(q('.caption'));\\n                let versionW = warp.dom.width(q('.version'));\\n                let incW = warp.dom.width(q('.create.incognito'));\\n                let tabsW = warp.dom.width(q('.tabs'));\\n                let createW = warp.dom.width(q('.create.tab'));\\n                //   let buttonsW = warp.dom.width(q('.buttons'));\\n                warp.dom.width(q('.trigger'), parW - (capW + versionW + incW + tabsW + createW + 40));\\n            }\\n            function events() {\\n                resizeListener = window.addEventListener('resize', resize);\\n                q('.trigger').addEventListener('mousedown', function () {\\n                    warp.invoke('Windows', 'Drag', [\\n                        hostWinId,\\n                        true\\n                    ]);\\n                });\\n                parent.addEventListener('mouseenter', function () {\\n                    gsap.to(this, {\\n                        duration: 0.2,\\n                        css: { 'background-color': 'black' }\\n                    });\\n                });\\n                parent.addEventListener('mouseleave', function () {\\n                    gsap.to(this, {\\n                        duration: 0.2,\\n                        css: { 'background-color': 'rgb(21,21,21)' }\\n                    });\\n                });\\n                q('.trigger').addEventListener('dragend', function () {\\n                    warp.invoke('Windows', 'Drag', [\\n                        hostWinId,\\n                        false\\n                    ]);\\n                });\\n                parent.addEventListener('dblclick', function () {\\n                    warp.invoke('Windows', 'Restore', [hostWinId]);\\n                });\\n                q('.create.tab').addEventListener('click', async function () {\\n                   // let winId = 'win' + Math.random().toString().replace('0.', '');\\n                    let winId = warp.native.hostWin.id;\\n                    \\n                    let t = 'tab' + Math.random().toString().replace('0.', '');\\n                  //  await warp.invoke('Windows', 'Create', [winId]);\\n                    await warp.invoke('Tabs', 'Create', [\\n                        'https://google.com',\\n                        t,\\n                        winId\\n                    ]);\\n                    await warp.invoke('Windows', 'Show', [winId]);\\n                    if (!warp.native.hostWin.debug) {\\n                        let dummy = {\\n                            Width: 700,\\n                            Height: 500,\\n                            Opacity: 0.8,\\n                            X: 1,\\n                            Y: 1\\n                        };\\n                        gsap.to(dummy, {\\n                            ease: 'cubic.out',\\n                            duration: 0.5,\\n                            X: (await warp.invoke('Windows', 'X', [\\n                                winId,\\n                                null\\n                            ])) + 30,\\n                            onUpdate: function () {\\n                                warp.invoke('Windows', 'X', [\\n                                    winId,\\n                                    dummy.X\\n                                ]);\\n                            }\\n                        });\\n                        gsap.to(dummy, {\\n                            ease: 'linear.out',\\n                            duration: 0.5,\\n                            Opacity: 1,\\n                            onUpdate: function () {\\n                                warp.invoke('Windows', 'Opacity', [\\n                                    winId,\\n                                    dummy.Opacity\\n                                ]);\\n                            }\\n                        });\\n                    } else\\n                        await warp.invoke('Windows', 'Opacity', [\\n                            winId,\\n                            1\\n                        ]);\\n                });\\n                q('.min').addEventListener('click', async function () {\\n                    warp.invoke('Windows', 'Minimize', [hostWinId]);\\n                });\\n                q('.close').addEventListener('click', async function () {\\n                    warp.invoke('Windows', 'Destroy', [hostWinId]);\\n                });\\n                q('.sett').addEventListener('click', async function () {\\n                    warp.app('Native.Settings').then(app => app.show());\\n                });\\n                q('.restore').addEventListener('click', async function () {\\n                    if ((await warp.invoke('Windows', 'State', [hostWinId])) == 'Maximized') {\\n                        warp.invoke('Windows', 'Restore', [hostWinId]);\\n                    } else\\n                        warp.invoke('Windows', 'Maximize', [hostWinId]);\\n                });\\n                warp.on('nativeWindowsCreate', function (id) {\\n                    if (!q('.' + safeName(id))) {\\n                        let groupDom = groupEl({ id: id });\\n                        q('.tabs').append(groupDom);\\n                        let w = warp.dom.width(groupDom);\\n                        warp.dom.hide(groupDom.querySelector('button'));\\n                        gsap.to(groupDom, {\\n                            duration: 0,\\n                            opacity: 0,\\n                            width: 0\\n                        });\\n                        gsap.to(groupDom, {\\n                            duration: 0.4,\\n                            ease: 'cubic.out',\\n                            opacity: 1,\\n                            width: w + 23,\\n                            onEach: function () {\\n                                resize();\\n                            },\\n                            onComplete: function () {\\n                                warp.dom.show(groupDom.querySelector('button'));\\n                                gsap.from(groupDom.querySelector('button'), {\\n                                    duration: 0.6,\\n                                    opacity: 20,\\n                                    ease: 'elastic.out',\\n                                    x: 10,\\n                                    opacity: 0.6\\n                                });\\n                                resize();\\n                            }\\n                        });\\n                    }\\n                });\\n                warp.on('nativeWindowsDestroy', function (id) {\\n                    let el = q('.tabs .' + safeName(id));\\n                    warp.dom.context.hide();\\n                    gsap.to(el.querySelector('.drawer'), {\\n                        duration: 0.3,\\n                        ease: 'linear.out',\\n                        opacity: 0\\n                    });\\n                    gsap.to(el, {\\n                        duration: 0,\\n                        opacity: 0.3\\n                    });\\n                    gsap.to(el, {\\n                        duration: 0.8,\\n                        ease: 'bounce.out',\\n                        opacity: 0,\\n                        width: 0,\\n                        left: -100,\\n                        onComplete: function () {\\n                            el.parentNode.removeChild(el);\\n                            resize();\\n                        }\\n                    });\\n                });\\n            }\\n            function setupIcons() {\\n                q('.caption').innerHTML = hostWinId;\\n                warp.invoke('Installation', 'InstalledVersion', []).then(v => {\\n                    q('.version').innerHTML = 'v.' + v;\\n                });\\n                resize();\\n            }\\n            function groupEl(data) {\\n                let el = warp.dom.node('span', {\\n                    click: function (e) {\\n                        e.preventDefault();\\n                        if (document.elementFromPoint(e.clientX, e.clientY).classList.contains('group'))\\n                            warp.invoke('Windows', 'Show', [data.id]);\\n                    }\\n                }, { class: safeName(data.id) + ' group mt5' });\\n                el.innerHTML = `\\n                            <button class=\\\" m5 op6 inverted dark\\\" style=\\\"border-color:black; background-color:black; position:fixed; top :7px; padding:0; width:12px!important; height:12px; border-radius:6px\\\">\\n                                <svg class=\\\"icon op8\\\" style=\\\" width:8px; height:8px;\\\">\\n                                    <use href=\\\"#icon-close\\\"></use>\\n                                </svg>\\n                            </button>\\n            `;\\n                el.querySelector('button').addEventListener('click', function (e) {\\n                    e.preventDefault();\\n                    warp.invoke('Windows', 'Destroy', [data.id]);\\n                });\\n                let drawer = warp.gui.drawer(data.id, {\\n                    usePrefs: true,\\n                    class: ' mb0 ',\\n                    size: 'xs',\\n                    beforeOpen: function (drawer) {\\n                    },\\n                    onClose: function (drawer) {\\n                    }\\n                });\\n                function setupDrawerBody(drawer) {\\n                    drawer.body.innerHTML = `\\n            \\n              `;\\n                    drawer.body.classList.add('tl');\\n                    drawer.body.append(warp.gui.slot({\\n                        brands: ['Tab'],\\n                        text: 'Add Tabs to this window'\\n                    }));\\n                    let ctx = {\\n                        'add new tab': async function () {\\n                            let t = 'tab' + Math.random().toString().replace('0.', '');\\n                            await warp.invoke('Tabs', 'Create', [\\n                                'https://google.com',\\n                                t,\\n                                data.id\\n                            ]);\\n                        }\\n                    };\\n                    warp.dom.context.add(drawer.el, ctx, 'Window');\\n                }\\n                setupDrawerBody(drawer);\\n                //group has min/max width???\\n                drawer.el.style.maxWidth = '145px';\\n                drawer.el.style.minWidth = '145px';\\n                drawer.el.style.maxHeight = '25px';\\n                drawer.el.style.overflow = 'visible';\\n                el.prepend(drawer.el);\\n                drawer.el.classList.add('inline-block');\\n                return el;\\n            }\\n            function tabEl(data) {\\n            }\\n            setupIcons();\\n            events();\\n        }\\n        this.init = function () {\\n            barEl.innerHTML = `     \\n    <style>\\n    .bar {\\n        fill:#a1a1a1;\\n        overflow: visible;\\n        max-height:35px; \\n        height:35px; \\n        position:absolute;\\n        width:100%; \\n        background-color:rgb(21,21,21);\\n        button {\\n                width: 25px;\\n                svg {\\n                height: 15px;\\n                width: 15px;\\n                }\\n            }\\n    \\n        button.icon {\\n            width: 35px!important;\\n            padding: 0px!important;\\n            svg {\\n                height: 10px!important;\\n                width: 10px!important;\\n            }\\n        }\\n    \\n        .group {\\n            width: auto;\\n            display: inline-block;\\n            height:25px;\\n            max-height:25px;\\n            background-color: rgb(35,35,35);\\n            margin-left: 5px;\\n           padding-top:2px;\\n           border-radius: 3px;\\n        }\\n           .group > * {\\n        vertical-align:middle; \\n    }\\n        .absfl{ \\n          display:inline-block;\\n          max-height:35px; \\n          height:35px; \\n          float: left;\\n        }\\n        \\n        \\n    }\\n    </style>\\n    \\n    <div class=\\\"bar pl10\\\" style=\\\"background-color: rgb(21, 21, 21);\\\">\\n    <div class=\\\"image ml5 absfl\\\"></div>\\n    <div class=\\\"caption tlg mt5 absfl\\\" style=\\\"max-width:100px; overflow:hidden; text-overflow: ellipsis; font-family:Oswald; \\\">\\n       \\n    </div>\\n    <div class=\\\"version op6 m5 mt10 absfl\\\">\\n       \\n    </div>\\n    <button class=\\\"create incognito sm op3 ml0 mr10 clear absfl\\\" onclick=\\\"warp.invoke('Instance', 'Incognito', [])\\\" style=\\\"transform: translate(0px, 0px); background-image: none;\\\">\\n        <svg viewBox=\\\"0, 0, 448, 512\\\" class=\\\"icon\\\">\\n            <path d=\\\"M224 16 c-6.7 0 -10.8 -2.8 -15.5 -6.1 C201.9 5.4 194 0 176 0 c-30.5 0 -52 43.7 -66 89.4 C62.7 98.1 32 112.2 32 128 c0 14.3 25 27.1 64.6 35.9 c-0.4 4 -0.6 8 -0.6 12.1 c0 17 3.3 33.2 9.3 48 l-59.9 0 C38 224 32 230 32 237.4 c0 1.7 0.3 3.4 1 5 l38.8 96.9 C28.2 371.8 0 423.8 0 482.3 C0 498.7 13.3 512 29.7 512 l388.6 0 c16.4 0 29.7 -13.3 29.7 -29.7 c0 -58.5 -28.2 -110.4 -71.7 -143 L415 242.4 c0.6 -1.6 1 -3.3 1 -5 c0 -7.4 -6 -13.4 -13.4 -13.4 l-59.9 0 c6 -14.8 9.3 -31 9.3 -48 c0 -4.1 -0.2 -8.1 -0.6 -12.1 C391 155.1 416 142.3 416 128 c0 -15.8 -30.7 -29.9 -78 -38.6 C324 43.7 302.5 0 272 0 c-18 0 -25.9 5.4 -32.5 9.9 c-4.8 3.3 -8.8 6.1 -15.5 6.1 z m56 208 l-12.4 0 c-16.5 0 -31.1 -10.6 -36.3 -26.2 c-2.3 -7 -12.2 -7 -14.5 0 c-5.2 15.6 -19.9 26.2 -36.3 26.2 L168 224 c-22.1 0 -40 -17.9 -40 -40 l0 -14.4 c28.2 4.1 61 6.4 96 6.4 s67.8 -2.3 96 -6.4 l0 14.4 c0 22.1 -17.9 40 -40 40 z m-88 96 l16 32 L176 480 L128 288 l64 32 z m128 -32 L272 480 L240 352 l16 -32 l64 -32 z\\\"></path>\\n        </svg>\\n    </button>\\n    <div class=\\\"tabs tsm absfl\\\"></div>\\n    <button class=\\\"create tab sm op3 clear ml-5 absfl\\\" style=\\\"transform: translate(0px, 0px); background-image: none;\\\">\\n        <svg viewBox=\\\"0, 0, 512, 512\\\" class=\\\"icon\\\">\\n            <path d=\\\"M256 512 A256 256 0 1 0 256 0 a256 256 0 1 0 0 512 z M232 344 l0 -64 l-64 0 c-13.3 0 -24 -10.7 -24 -24 s10.7 -24 24 -24 l64 0 l0 -64 c0 -13.3 10.7 -24 24 -24 s24 10.7 24 24 l0 64 l64 0 c13.3 0 24 10.7 24 24 s-10.7 24 -24 24 l-64 0 l0 64 c0 13.3 -10.7 24 -24 24 s-24 -10.7 -24 -24 z\\\"></path>\\n        </svg>\\n    </button>\\n    <div class=\\\"trigger absfl\\\" style=\\\"width: 761px;\\\"></div>\\n    <div class=\\\"buttons\\\" style=\\\"position:absolute; right:5px\\\">\\n        <button class=\\\"sett op3 clear xs mr10\\\">\\n            <svg viewBox=\\\"0, 0, 512, 512\\\" class=\\\"icon\\\">\\n                <path d=\\\"M495.9 166.6 c3.2 8.7 0.5 18.4 -6.4 24.6 l-43.3 39.4 c1.1 8.3 1.7 16.8 1.7 25.4 s-0.6 17.1 -1.7 25.4 l43.3 39.4 c6.9 6.2 9.6 15.9 6.4 24.6 c-4.4 11.9 -9.7 23.3 -15.8 34.3 l-4.7 8.1 c-6.6 11 -14 21.4 -22.1 31.2 c-5.9 7.2 -15.7 9.6 -24.5 6.8 l-55.7 -17.7 c-13.4 10.3 -28.2 18.9 -44 25.4 l-12.5 57.1 c-2 9.1 -9 16.3 -18.2 17.8 c-13.8 2.3 -28 3.5 -42.5 3.5 s-28.7 -1.2 -42.5 -3.5 c-9.2 -1.5 -16.2 -8.7 -18.2 -17.8 l-12.5 -57.1 c-15.8 -6.5 -30.6 -15.1 -44 -25.4 L83.1 425.9 c-8.8 2.8 -18.6 0.3 -24.5 -6.8 c-8.1 -9.8 -15.5 -20.2 -22.1 -31.2 l-4.7 -8.1 c-6.1 -11 -11.4 -22.4 -15.8 -34.3 c-3.2 -8.7 -0.5 -18.4 6.4 -24.6 l43.3 -39.4 C64.6 273.1 64 264.6 64 256 s0.6 -17.1 1.7 -25.4 L22.4 191.2 c-6.9 -6.2 -9.6 -15.9 -6.4 -24.6 c4.4 -11.9 9.7 -23.3 15.8 -34.3 l4.7 -8.1 c6.6 -11 14 -21.4 22.1 -31.2 c5.9 -7.2 15.7 -9.6 24.5 -6.8 l55.7 17.7 c13.4 -10.3 28.2 -18.9 44 -25.4 l12.5 -57.1 c2 -9.1 9 -16.3 18.2 -17.8 C227.3 1.2 241.5 0 256 0 s28.7 1.2 42.5 3.5 c9.2 1.5 16.2 8.7 18.2 17.8 l12.5 57.1 c15.8 6.5 30.6 15.1 44 25.4 l55.7 -17.7 c8.8 -2.8 18.6 -0.3 24.5 6.8 c8.1 9.8 15.5 20.2 22.1 31.2 l4.7 8.1 c6.1 11 11.4 22.4 15.8 34.3 z M256 336 a80 80 0 1 0 0 -160 a80 80 0 1 0 0 160 z\\\"></path>\\n            </svg>\\n        </button>\\n        <button class=\\\"min xs op5 clear icon\\\">\\n            <svg viewBox=\\\"0, 0, 512, 512\\\" class=\\\"icon\\\">\\n                <path d=\\\"M32 416 c-17.7 0 -32 14.3 -32 32 s14.3 32 32 32 l448 0 c17.7 0 32 -14.3 32 -32 s-14.3 -32 -32 -32 L32 416 z\\\"></path>\\n            </svg>\\n        </button>\\n        <button class=\\\"restore xs op5 clear icon\\\">\\n            <svg viewBox=\\\"0, 0, 512, 512\\\" class=\\\"icon\\\">\\n                <path d=\\\"M432 48 L208 48 c-17.7 0 -32 14.3 -32 32 l0 16 l-48 0 l0 -16 c0 -44.2 35.8 -80 80 -80 L432 0 c44.2 0 80 35.8 80 80 l0 224 c0 44.2 -35.8 80 -80 80 l-16 0 l0 -48 l16 0 c17.7 0 32 -14.3 32 -32 l0 -224 c0 -17.7 -14.3 -32 -32 -32 z M48 448 c0 8.8 7.2 16 16 16 l256 0 c8.8 0 16 -7.2 16 -16 l0 -192 L48 256 l0 192 z M64 128 l256 0 c35.3 0 64 28.7 64 64 l0 256 c0 35.3 -28.7 64 -64 64 L64 512 c-35.3 0 -64 -28.7 -64 -64 L0 192 c0 -35.3 28.7 -64 64 -64 z\\\"></path>\\n            </svg>\\n        </button>\\n        <button class=\\\"close sm op5 clear  mr10\\\">\\n            <svg viewBox=\\\"0, 0, 384, 512\\\" class=\\\"icon\\\">\\n                <path d=\\\"M342.6 150.6 c12.5 -12.5 12.5 -32.8 0 -45.3 s-32.8 -12.5 -45.3 0 L192 210.7 L86.6 105.4 c-12.5 -12.5 -32.8 -12.5 -45.3 0 s-12.5 32.8 0 45.3 L146.7 256 L41.4 361.4 c-12.5 12.5 -12.5 32.8 0 45.3 s32.8 12.5 45.3 0 L192 301.3 L297.4 406.6 c12.5 12.5 32.8 12.5 45.3 0 s12.5 -32.8 0 -45.3 L237.3 256 L342.6 150.6 z\\\"></path>\\n            </svg>\\n        </button>\\n    </div>\\n</div>\\n\\n`;\\n            setupHostWin();\\n        };\\n        this.clean = function () {\\n            if (resizeListener)\\n                window.removeEventListener('resize', resizeListener);\\n            try {\\n                warp.gui.layers.main.el.removeChild(barEl);\\n            } catch (e) {\\n            }\\n        };\\n    }\""
            }
        },
        "AddressBar": {
            "name": "AddressBar",
            "brands": [],
            "deps": [],
            "description": "",
            "folder": {
                "AddressBar.js": "\"@function:function AddressBar() {\\n        let app = this;\\n        let barEl = warp.dom.node('div', {}, { style: 'position:fixed; width:100%; left:0px; top:35px' });\\n        let resizeListener;\\n        this.inspect = function (subject) {\\n        };\\n        async function setupHostWin() {\\n            let hostWinId = warp.native.hostWin.id;\\n            warp.gui.layers.main.el.prepend(barEl);\\n            let parent = barEl.querySelector('.address-bar');\\n            function q(sel) {\\n                return parent.querySelector(sel);\\n            }\\n            function resize() {\\n            }\\n            function events() {\\n                resizeListener = window.addEventListener('resize', resize);    \\n            }\\n            function setupIcons() {\\n                resize();\\n            }\\n            setupIcons();\\n            events();\\n        }\\n        this.init = function () {\\n            barEl.innerHTML = `     \\n\\n<div class=\\\"address-bar pb5 hsm\\\" style=\\\"background-color: rgb(20, 20, 20);\\\">\\n    <div class=\\\"buttons\\\">\\n     \\n    </div>\\n    <div style=\\\"margin-left:100px; background-color: rgb(20, 20, 20); border: 1px solid rgb(10, 10, 10); border-radius : 15px; height:30px;\\\">\\n        <svg class=\\\"fl clear icon m5 mb0 mr0\\\" style=\\\"\\n                fill:rgb(140,140,140);\\n                height:15px;\\n                width:15px;\\n                z-index:10\\\">\\n                <use href=\\\"#icon-search\\\" y=\\\"2\\\"></use>\\n        </svg>\\n        <input type=\\\"text\\\" class=\\\"xs hxs\\\" placeholder=\\\"search internet or paste URL\\\" style=\\\"width:350px; border:none\\\" />\\n\\n        <button class=\\\"xs go mr10 fr clear\\\" title=\\\"navigate to url\\\">Go</button>\\n        \\n        <svg class=\\\"clearinput clear default inverted icon mt5 op7 hidden fr\\\" style=\\\"\\n            cursor:pointer;\\n            overflow:visible;\\n            fill:rgb(140,140,140);\\n            margin-bottom:0px;\\n            height:10px;\\n            width:10px;\\n            z-index:10\\\">\\n            <use href=\\\"#icon-close\\\"></use>\\n        </svg>\\n    </div>\\n</div>`;\\n            setupHostWin();\\n        };\\n        this.clean = function () {\\n            if (resizeListener)\\n                window.removeEventListener('resize', resizeListener);\\n            try {\\n                warp.gui.layers.main.el.removeChild(barEl);\\n            } catch (e) {\\n            }\\n        };\\n    }\""
            }
        },
        "VPN": {
            "name": "VPN",
            "brands": [],
            "deps": [],
            "description": "",
            "folder": {
                "VPN.js": "\"@function:function VPN(){\\n        let app = this;\\n        let GUI = {\\n            'current': {\\n                html: `\\n                        \\n<svg style=\\\"margin-top:-100px; margin-bottom:-50px; \\\" viewBox=\\\"0 0 800 600\\\" style=\\\"enable-background:new 0 0 800 600;\\\" xml:space=\\\"preserve\\\">\\n<style type=\\\"text/css\\\">\\n\\t.st0{clip-path:url(#SVGID_00000047037800552049276960000011659467216537756050_);}\\n\\t.st1{fill-rule:evenodd;clip-rule:evenodd;fill:url(#SVGID_00000069391291331483261720000013015708223290131339_);}\\n\\t.st2{fill-rule:evenodd;clip-rule:evenodd;fill:url(#SVGID_00000127017631367124125600000004577642212512333500_);}\\n\\t.st3{fill:url(#SVGID_00000141429164965431222810000016328630503299043230_);}\\n\\t.st4{fill:#6D4AFF;}\\n\\t.st5{fill:#eee;}\\n</style>\\n<g>\\n\\t<defs>\\n\\t\\t<rect id=\\\"SVGID_1_\\\" x=\\\"56.1\\\" y=\\\"228.5\\\" width=\\\"693.2\\\" height=\\\"135.6\\\"/>\\n\\t</defs>\\n\\t<clipPath id=\\\"SVGID_00000100341906889217512950000001323839311951295138_\\\">\\n\\t\\t<use xlink:href=\\\"#SVGID_1_\\\"  style=\\\"overflow:visible;\\\"/>\\n\\t</clipPath>\\n\\t<g style=\\\"clip-path:url(#SVGID_00000100341906889217512950000001323839311951295138_);\\\">\\n\\t\\t\\n\\t\\t\\t<linearGradient id=\\\"SVGID_00000170274601395247888130000001894264076738910343_\\\" gradientUnits=\\\"userSpaceOnUse\\\" x1=\\\"146.7364\\\" y1=\\\"452.6335\\\" x2=\\\"151.6761\\\" y2=\\\"284.6943\\\" gradientTransform=\\\"matrix(1 0 0 -1 -20.9449 604.3622)\\\">\\n\\t\\t\\t<stop  offset=\\\"0.9887\\\" style=\\\"stop-color:#6D4AFF\\\"/>\\n\\t\\t\\t<stop  offset=\\\"1\\\" style=\\\"stop-color:#000000\\\"/>\\n\\t\\t</linearGradient>\\n\\t\\t<path style=\\\"fill-rule:evenodd;clip-rule:evenodd;fill:url(#SVGID_00000170274601395247888130000001894264076738910343_);\\\" d=\\\"\\n\\t\\t\\tM114.5,356.4c5.5,10,19.7,10.5,25.9,1l58.4-89c6.2-9.4,0.3-22.1-10.9-23.4L73.1,231.8c-12.2-1.4-21,11.6-15,22.4L114.5,356.4z\\\"/>\\n\\t\\t\\n\\t\\t\\t<linearGradient id=\\\"SVGID_00000111164369635068509860000001013873180400574393_\\\" gradientUnits=\\\"userSpaceOnUse\\\" x1=\\\"167.5198\\\" y1=\\\"427.4431\\\" x2=\\\"126.4724\\\" y2=\\\"250.7141\\\" gradientTransform=\\\"matrix(1 0 0 -1 -20.9449 604.3622)\\\">\\n\\t\\t\\t<stop  offset=\\\"0.4799\\\" style=\\\"stop-color:#24ECC6;stop-opacity:0\\\"/>\\n\\t\\t\\t<stop  offset=\\\"0.9944\\\" style=\\\"stop-color:#24ECC6\\\"/>\\n\\t\\t</linearGradient>\\n\\t\\t<path style=\\\"fill-rule:evenodd;clip-rule:evenodd;fill:url(#SVGID_00000111164369635068509860000001013873180400574393_);\\\" d=\\\"\\n\\t\\t\\tM114.5,356.4c5.5,10,19.7,10.5,25.9,1l58.4-89c6.2-9.4,0.3-22.1-10.9-23.4L73.1,231.8c-12.2-1.4-21,11.6-15,22.4L114.5,356.4z\\\"/>\\n\\t\\t\\n\\t\\t\\t<linearGradient id=\\\"SVGID_00000128472700925013171050000006297961043265827228_\\\" gradientUnits=\\\"userSpaceOnUse\\\" x1=\\\"205.1286\\\" y1=\\\"253.2852\\\" x2=\\\"114.1183\\\" y2=\\\"408.9221\\\" gradientTransform=\\\"matrix(1 0 0 -1 -20.9449 604.3622)\\\">\\n\\t\\t\\t<stop  offset=\\\"6.601250e-02\\\" style=\\\"stop-color:#ABFFEF\\\"/>\\n\\t\\t\\t<stop  offset=\\\"0.4499\\\" style=\\\"stop-color:#CAC9FF\\\"/>\\n\\t\\t\\t<stop  offset=\\\"1\\\" style=\\\"stop-color:#6D4AFF\\\"/>\\n\\t\\t</linearGradient>\\n\\t\\t<path style=\\\"fill:url(#SVGID_00000128472700925013171050000006297961043265827228_);\\\" d=\\\"M123,339.3l-5.2,7.8\\n\\t\\t\\tc-2.1,3.2-6.8,3-8.6-0.4l5.3,9.7c1,1.7,2.2,3.2,3.5,4.3l0,0c6.6,5.6,17.2,4.6,22.4-3.3l58.4-89c6.2-9.4,0.3-22.1-10.9-23.4\\n\\t\\t\\tL73.1,231.8c-12.2-1.4-21,11.6-15,22.4l0.5,0.8l97.7,11.3c6.2,0.7,9.5,7.8,6.1,13L123,339.3z\\\"/>\\n\\t\\t<path class=\\\"st4\\\" d=\\\"M657.5,259.2h-33.7v73h13.3V314c0-1.8,0.7-3.5,1.9-4.7c1.3-1.2,2.9-2,4.7-2h13.7c6.4,0,12.5-2.5,17-7\\n\\t\\t\\tc4.5-4.5,7-10.6,7-17c0-3.2-0.6-6.3-1.8-9.2s-3-5.6-5.2-7.8s-4.9-4-7.8-5.2C663.8,259.9,660.7,259.2,657.5,259.2L657.5,259.2z\\n\\t\\t\\t M668,283.2c0,1.5-0.3,3-0.9,4.4c-0.6,1.4-1.4,2.6-2.5,3.7c-1.1,1.1-2.3,1.9-3.7,2.5c-1.4,0.6-2.9,0.9-4.4,0.9h-19.5v-22.7h19.5\\n\\t\\t\\tc1.5,0,3,0.3,4.4,0.9c1.4,0.6,2.6,1.4,3.7,2.5c1.1,1.1,1.9,2.3,2.5,3.7C667.7,280.3,668,281.7,668,283.2L668,283.2z\\\"/>\\n\\t\\t<path class=\\\"st4\\\" d=\\\"M577,331.9L550.1,259h15.2l17.7,52.2c0.7,1.9,1.2,3.8,1.5,5.8h0.1c0.2-2,0.7-3.9,1.5-5.8l17.7-52.2h15.3\\n\\t\\t\\tl-27,72.9H577z\\\"/>\\n\\t\\t<path class=\\\"st4\\\" d=\\\"M686.5,331.9V259h11.7l34.4,45.2c1.2,1.6,2.3,3.2,3.2,5h0.2c-0.2-2.2-0.3-4.4-0.3-6.6V259h13.8v72.9h-11.7\\n\\t\\t\\tl-34.5-45.2c-1.2-1.6-2.3-3.2-3.2-5H700c0.2,2.2,0.3,4.4,0.2,6.6v43.6H686.5z\\\"/>\\n\\t\\t<path class=\\\"st5\\\" d=\\\"M284.4,258.8h-33.7v73H264v-18.2c0-1.8,0.7-3.5,2-4.7c1.2-1.2,2.9-2,4.7-2h13.7c6.4,0,12.5-2.5,17-7\\n\\t\\t\\tc4.5-4.5,7-10.6,7-17c0-3.2-0.6-6.3-1.8-9.2c-1.2-2.9-3-5.6-5.2-7.8c-2.2-2.2-4.9-4-7.8-5.2C290.7,259.4,287.5,258.8,284.4,258.8\\n\\t\\t\\tL284.4,258.8z M294.9,282.8c0,1.5-0.3,3-0.9,4.4c-0.6,1.4-1.4,2.6-2.5,3.7c-1.1,1.1-2.3,1.9-3.7,2.5c-1.4,0.6-2.9,0.9-4.4,0.9H264\\n\\t\\t\\tv-22.7h19.5c1.5,0,3,0.3,4.4,0.9c1.4,0.6,2.6,1.4,3.7,2.5c1.1,1.1,1.9,2.3,2.5,3.7C294.6,279.8,294.9,281.3,294.9,282.8\\n\\t\\t\\tL294.9,282.8z\\\"/>\\n\\t\\t<path class=\\\"st5\\\" d=\\\"M310.5,331.8v-28.9c0-11.8,6.9-21.2,20.7-21.2c2.2,0,4.4,0.2,6.6,0.7v11.9c-1.6-0.1-3-0.1-3.6-0.1\\n\\t\\t\\tc-7.3,0-10.5,3.3-10.5,10.1v27.5H310.5z\\\"/>\\n\\t\\t<path class=\\\"st5\\\" d=\\\"M341.7,307.2c0-14.5,11-25.6,26.2-25.6c15.3,0,26.2,11.1,26.2,25.6c0,14.5-11,25.7-26.2,25.7\\n\\t\\t\\tC352.7,332.9,341.7,321.8,341.7,307.2z M381.1,307.2c0-8.3-5.5-14.1-13.2-14.1c-7.6,0-13.2,5.9-13.2,14.1\\n\\t\\t\\tc0,8.3,5.5,14.1,13.2,14.1C375.6,321.3,381.1,315.6,381.1,307.2L381.1,307.2z\\\"/>\\n\\t\\t<path class=\\\"st5\\\" d=\\\"M432.6,293.2h-14.3v18.3c0,6.4,2.3,9.3,8.9,9.3c0.6,0,2.2,0,4.2-0.1v10.8c-2.5,0.7-5.1,1.1-7.7,1.1\\n\\t\\t\\tc-11.1,0-18.6-6.7-18.6-19.3v-20.1h-8.9v-10.5h2.2c1.8,0,3.5-0.7,4.7-2c1.2-1.2,2-2.9,2-4.7v-10h13.3v16.6h14.3V293.2z\\\"/>\\n\\t\\t<path class=\\\"st5\\\" d=\\\"M436.6,307.2c0-14.5,11-25.6,26.2-25.6c15.2,0,26.2,11.1,26.2,25.6c0,14.5-11,25.7-26.2,25.7\\n\\t\\t\\tS436.6,321.8,436.6,307.2z M476,307.2c0-8.3-5.5-14.1-13.2-14.1s-13.2,5.9-13.2,14.1c0,8.3,5.5,14.1,13.2,14.1\\n\\t\\t\\tC470.4,321.3,476,315.6,476,307.2z\\\"/>\\n\\t\\t<path class=\\\"st5\\\" d=\\\"M495.9,331.8v-28c0-13,8.3-22.3,23-22.3s22.9,9.3,22.9,22.3v27.9h-13.2v-26.8c0-7.2-3.2-11.7-9.7-11.7\\n\\t\\t\\tc-6.5,0-9.7,4.5-9.7,11.7v26.9H495.9z\\\"/>\\n\\t</g>\\n</g>\\n</svg>\\n                            <div class=\\\"small op5 mb5\\\">YOUR IP</div>\\n                            <input class=\\\"disabled sm\\\" type=\\\"text\\\" value=\\\"127.0.0.0\\\">\\n                            \\n                            <br>\\n                            <div class=\\\"small op5 mb5\\\">COUNTRY</div>\\n                            <input class=\\\"disabled sm\\\" type=\\\"text\\\" value=\\\"Germany\\\">\\n                            <button class=\\\"fr xs m5 fr vpn\\\">Disconnect</button>`\\n                            ,\\n                events: {\\n                    'button.vpn': {\\n                        'click': function () {\\n                            toast('Starting/stopping VPN');\\n                        }\\n                    }\\n                },\\n                init: async function () {\\n                  }\\n            },\\n             'upgrade': {\\n                html: `\\n                            <h3 class=\\\"mtxl mb20\\\">Settings</h3>\\n                            <div class=\\\"small op5 mb5\\\">ACCOUNT TYPE</div>\\n                            <select class=\\\" sm\\\">\\n                                <option value=\\\"0\\\">Proton Free</option>\\n                                <option value=\\\"1\\\">Proton Plus</option>\\n                                <option value=\\\"2\\\">Proton Unlimited</option>\\n                            </select>\\n                            <button class=\\\"sm m5 fr upgrade\\\">Upgrade</button>`\\n                            ,\\n                events: {\\n                    'button.upgrade': {\\n                        'click': function () {\\n                            warp.invoke(\\\"Tabs\\\", \\\"Create\\\" , [\\\"Proton\\\", \\\"https://protonvpn.com/pricing\\\" , warp.native.hostWin.id])\\n                        }\\n                    }\\n                },\\n                init: async function () {\\n                  }\\n            }\\n        };\\n        app.inspect = function (subject) {\\n        };\\n        app.init = function () {\\n      \\n            function renderGUI() {\\n                function parse() {\\n                    let final = '';\\n                    each(GUI, function (name, part) {\\n                        final = final + '<div class=\\\"' + name + ' tl m10 mtxl mbmd\\\">' + part.html + '</div>';\\n                    });\\n                    app.el.innerHTML = final;\\n                    each(GUI, function (name, part) {\\n                        each(part.events, function (selector, event) {\\n                            app.el.querySelector(selector).addEventListener(Object.keys(event)[0], Object.values(event)[0]);\\n                        });\\n                        part.init();\\n                    });\\n                }\\n                parse();\\n            }\\n            setupWin(app);\\n            renderGUI();\\n        };\\n    }\""
            }
        },
        "Welcome": {
            "name": "Welcome",
            "brands": [],
            "deps": [],
            "description": "",
            "folder": {
                "Welcome.js": "\"@function:function Welcome() {\\n        let app = this;\\n        this.inspect = function (subject) {\\n        };\\n        app.init = function () {\\n            app.el.innerHTML = `\\n<div class=\\\"tl mtxl mla mra inline-block\\\" style=\\\"width:1000px;\\\">\\n    <h1 class=\\\"mtxl\\\">\\n        <span class=\\\"txl\\\">\\n            <span class=\\\"s1 inline-block\\\" style=\\\"\\n                margin-right: -0.22em;\\n                margin-bottom: -0.5em;\\n                padding: 0.2em;\\n                line-height: 0.8em;\\n                border-radius: 1em;\\n                height: 1.6em;\\n                width: 1.6em;\\n                padding-top: 0.45em;\\\">\\n            W\\n            </span>\\n            <span>\\n            arp\\n            </span>\\n        </span>\\n        <br>\\n        <div class=\\\"op3\\\" style=\\\"font-weight:bold; margin-left:5.5em;  font-size:0.5em\\\">\\n        BROWSER\\n        </div>\\n    </h1>\\n    \\n    <div class=\\\"cont mt10\\\">\\n    </div> \\n</div>      \\n    \\n        `;\\n            let published = [\\n                {\\n                    name: 'Warp vs Browser vs OS',\\n                    desc: 'How does a conventional browser\\\\'s or Operating system\\\\'s user experience compare with Warp\\\\'s?',\\n                    profile: 100000001,\\n                    show: async function () {\\n                        let x = await warp.app('Warp.WarpVsBrowser');\\n                        x.show();\\n                    }\\n                },\\n                {\\n                    name: 'Console',\\n                    desc: 'Interact with the Browser and Engine through API\\\\'s',\\n                    profile: 100000001,\\n                    show: async function () {\\n                        warp.console.show();\\n                    }\\n                },\\n                {\\n                    name: 'API\\\\'s Reference',\\n                    desc: 'Find parameteres for Warp\\\\'s rich programing interfaces',\\n                    profile: 100000001,\\n                    show: async function () {\\n                        let app = await warp.app('Native.Reference');\\n                        app.show();\\n                    }\\n                },\\n                {\\n                    name: 'Examples',\\n                    desc: 'Examples for native',\\n                    profile: 100000001,\\n                    show: async function () {\\n                        let x = await warp.app('Native.Examples');\\n                        x.show();\\n                    }\\n                }\\n            ];\\n            let el = app.query('.cont');\\n            function parse(data) {\\n                let div = warp.dom.node('div', {}, {\\n                    class: 'inline-block m20 tl op9',\\n                    style: 'width:200px'\\n                });\\n                div.innerHTML = `\\n            <h3>${ data.name }</h3>\\n            <p class=\\\"hlg tj op8\\\">${ data.desc }</p>\\n            <button class=\\\"xs op6 fr\\\">Show</button>\\n            `;\\n                if (data.layout) {\\n                    div.querySelector('button').addEventListener('click', async function () {\\n                        let f = await fetch(data.layout);\\n                        f = await f.text();\\n                        f = {\\n                            name: 'Native.layout',\\n                            path: 'layouts/Native.layout',\\n                            drive: false,\\n                            data: f\\n                        };\\n                        new Warp.Manager(f);\\n                        app.hide()\\n                    });\\n                } else\\n                    div.querySelector('button').addEventListener('click', async function () {\\n                        data.show();\\n                        app.hide()\\n                    });\\n                el.append(div);\\n            }\\n            setupWin(app);\\n            app.win.options(\\\"backdrop\\\",true);\\n            app.win.options(\\\"backdropCloses\\\",true)\\n            app.win.options(\\\"showCentered\\\",true)\\n            app.win.options(\\\"keepCentered\\\",true)\\n            published.forEach(parse);\\n            app.win.width(1300);\\n            app.win.height(800);\\n        };\\n    }\""
            }
        },
        "Pitch": {
            "name": "Pitch",
            "brands": [
                ""
            ],
            "deps": [],
            "description": "",
            "folder": {
                "Pitch.js": "\"@function:function Pitch() {\\n    let data = {\\n        \\\"intro\\\": {\\n            \\\"count\\\": 40,\\n            \\\"text\\\": \\\"Hi, I’m Pavao, and I contacted you on behalf of the Warp team.\\\\nWe’re building a browser with a completely new architecture.\\\\nAfter several years in stealth, we’re finally ready to start showing why we think Warp could be the next hot browser.\\\",\\n            \\\"color\\\": \\\"#A8DADC\\\"  // pastel teal\\n        },\\n        \\\"status\\\": {\\n            \\\"count\\\": 120,\\n            \\\"text\\\": `The internet and browsing experience is defined by 3 companies which historicaly had very little interest\\n                      in technological advancement of browsers because it directly intererefes with their business model.\\n                      As time progressed Internet has become more than a distributed data retrival system, it became a platform for publishing.\\n                      As a split between doc and app web never happened, developing, publishing and scaling Web Apps became complicated and expencive`,\\n            \\\"color\\\": \\\"#FBC4AB\\\"  // pastel peach\\n        },\\n        \\\"product\\\": {\\n            \\\"count\\\": 240,\\n            \\\"text\\\": ``,\\n            \\\"color\\\": \\\"#FFDAC1\\\"  // pastel pink\\n        },\\n        \\\"market\\\": {\\n            \\\"count\\\": 160,\\n            \\\"text\\\": ``,\\n            \\\"color\\\": \\\"#E0BBE4\\\"  // pastel lavender\\n        },\\n        \\\"why us\\\": {\\n            \\\"count\\\": 160,\\n            \\\"text\\\": `\\n            Warp is being built by a team of six senior engineers and product leaders with deep experience in systems, browsers, and emerging tech. \\n            We've worked across startups and major platforms, and we know how to build fast, ship with purpose, and scale products that matter.\\n            Our browser isn’t just another Chromium or Blink skin. \\n            It’s a novel architecture with fundamentally new approach built to support how modern users interact with the web, software and data. \\nAnd the timing couldn’t be better. \\nWith AI-native workflows exploding, and the internet redefining itself around decentralized content and programmable interfaces, a browser designed for these realities isn’t a luxury—it’s a necessity.\\nWarp is hitting the market exactly when the market is starting to demand what we’ve already been building.`,\\n            \\\"color\\\": \\\"#D8F3DC\\\"  // pastel green\\n        },\\n        \\\"ask\\\": {\\n            \\\"count\\\": 80,\\n            \\\"text\\\": `We are asking for evaluation of $50m,\\n            and equity investment of $5m for 10% of ownership to cover next two years.\\n            We  will use this to broaden our team, collaborators and partnerships.\\n            <br> Brakedown : <br>\\n            Development, engine, native, cloud : 38% <br>\\n            Marketing and commercial, collab project dev and management, comunity engagement 28% <br>\\n            Infrastructure, devops, ai 9% <br> \\n            Managemant, legal and administration, salries , facilities 17% <br>\\n            Misc 8% <br><br>\\n            After these two years we will be able to advance to next step, a novel OS based on Linux kernel and Warp as Operatinal environment\\n            `,\\n            \\\"color\\\": \\\"#B5EAD7\\\"  // pastel mint\\n        }\\n    }\\n    let app = this;\\n    this.inspect = function (subject) {}\\n    this.init = function() {\\n        function setupAppGui() {\\n            app.el.classList.add('tl');\\n            app.el.innerHTML = `\\n\\n            `;\\n            function background(c) {\\n                app.win.el.style.backgroundColor = c;\\n                app.win.content.style.backgroundColor = c;\\n                app.win.body.style.backgroundColor = c;\\n            }\\n            app.el.classList.add('p10');\\n            app.win.width(1000);\\n            app.win.height(300);\\n            app.show();\\n            background('rgb(25,25,25)');\\n            app.win.restore();\\n            app.win.el.classList.remove('inspector');\\n        }\\n        setupAppGui();\\n        function renderPitchJsonToSVG(pitchJson) {\\n  const sectionNames = Object.keys(pitchJson);\\n  const totalWords = sectionNames.reduce((sum, key) => sum + pitchJson[key].count, 0);\\n\\n  const width = 800;\\n  const height = 250;\\n  const margin = 10;\\n  const barHeight = 100;\\n\\n  let xOffset = 0;\\n  let svgGroups = '';\\n\\n  for (const name of sectionNames) {\\n    const { count, color, text } = pitchJson[name];\\n    const sectionWidth = (count / totalWords) * (width - margin * (sectionNames.length + 1));\\n    const x = xOffset + margin;\\n    const y = (height - barHeight) / 2;\\n\\n    // Calculate actual word count from text\\n    const actualWords = text.trim().split(/\\\\s+/).filter(Boolean).length;\\n    const wordDiff = actualWords - count;\\n    const wordDiffLabel = wordDiff === 0 ? '±0' : (wordDiff > 0 ? `+${wordDiff}` : `${wordDiff}`);\\n    const diffColor = wordDiff > 0 ? 'red' : '#666';\\n\\n    svgGroups += `\\n      <g class=\\\"section-${name}\\\">\\n        <rect x=\\\"${x}\\\" y=\\\"${y}\\\" width=\\\"${sectionWidth}\\\" height=\\\"${barHeight}\\\" fill=\\\"${color}\\\" rx=\\\"8\\\" ry=\\\"8\\\"/>\\n        <text x=\\\"${x + sectionWidth / 2}\\\" y=\\\"${y + barHeight / 2 - 8}\\\" text-anchor=\\\"middle\\\" fill=\\\"#333\\\" font-size=\\\"16\\\" font-family=\\\"Arial\\\" dominant-baseline=\\\"middle\\\">${name}</text>\\n        <text x=\\\"${x + sectionWidth / 2}\\\" y=\\\"${y + barHeight / 2 + 16}\\\" text-anchor=\\\"middle\\\" fill=\\\"${diffColor}\\\" font-size=\\\"14\\\" font-family=\\\"Arial\\\" dominant-baseline=\\\"middle\\\">${wordDiffLabel}</text>\\n      </g>\\n    `;\\n\\n    xOffset += sectionWidth + margin;\\n  }\\n\\n  return `\\n    <svg width=\\\"${width}\\\" height=\\\"${height}\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n      ${svgGroups}\\n    </svg>\\n  `;\\n}\\n\\n        app.el.innerHTML = renderPitchJsonToSVG(data);\\n        app.el.querySelectorAll('g').forEach(function (el) {\\n            el.addEventListener('click', function (e) {\\n                alert(data[el.querySelector(\\\"text\\\").textContent].text)\\n                el.querySelector(\\\"text\\\").style.pointerEvents =\\\"none\\\"\\n            });\\n        });\\n    }\\n}\""
            }
        },
        "Debug": {
            "name": "Debug",
            "brands": [
                "All"
            ],
            "deps": [],
            "description": "",
            "folder": {
                "Debug.js": "\"@function:function Debug() {\\n        let app = this;\\n        this.inspect = function (subject) {\\n        };\\n        this.init = function () {\\n            app.el.append(warp.gui.buttons({\\n                'rects': function () {\\n                    setInterval(async function () {\\n                        let win = warp.native.hostWin.id;\\n                        let pointer = await warp.invoke('Windows', 'Pointer', [\\n                            win,\\n                            false,\\n                            false\\n                        ]);\\n                        pointer = [\\n                            pointer.split(',')[0] / 120 * 100,\\n                            pointer.split(',')[1] / 120 * 100\\n                        ];\\n                        warp.gui.layers.helpers.instances = [];\\n                        warp.gui.layers.helpers.create({\\n                            x: pointer[0],\\n                            y: pointer[1],\\n                            r: 3,\\n                            stroke: 'darkorange',\\n                            opacity: 0.5\\n                        }, 'Ellipse');\\n                        //warp.gui.layers.helpers.toast(windowRects.length)\\n                        windowRects.forEach(function (r) {\\n                            warp.gui.layers.helpers.create({\\n                                x: r.x,\\n                                y: r.y,\\n                                width: r.width,\\n                                height: r.height\\n                            }, 'Box');\\n                        \\n                          \\n                        });\\n                    }, 500);\\n                }\\n            }));\\n        };\\n    }\""
            }
        },
        "Examples": {
            "name": "Examples",
            "brands": [],
            "deps": [],
            "description": "",
            "folder": {
                "Examples.js": "\"@function:function Examples() {\\n        let app = this;\\n        let examplesData = {\\n            Native: {\\n                desc: `These examples are Native-dependent and will work only in Warp browser`,\\n                sets: {\\n                    'Basic Tab Work, Creating and Control': {\\n                        drawer: false,\\n                        desc: 'These examples show basic work with tabs: creation, navigation, retrieval, etc.',\\n                        examples: [\\n                            {\\n                                'title': 'Open a new tab with .tab async interface',\\n                                'desc': `warp.tab async method gives you a simple API to control page behavior. The tab promise resolves when the DOMLoaded event is triggered in the tab's web page. The simplest way to open a tab is by passing a URL as the first parameter.`,\\n                                'code': `let tab = await warp.tab(\\\"https://google.com\\\");`\\n                            },\\n                            {\\n                                'title': 'Open a new tab with specific ID',\\n                                'desc': `By passing an ID in options, we can retrieve this tab later.\\nFor convenience, the first parameter can also be an options object containing the \\\"url\\\" property.`,\\n                                'code': `let tab = await warp.tab('https://nyt.com', { id: 'myTab' });\\n// or as one object argument \\nlet tab2 = await warp.tab({\\n    url: 'https://duckduckgo.com',\\n    id: 'myTab2'\\n});`\\n                            },\\n                            {\\n                                'title': 'Open several tabs and close them when loaded',\\n                                'desc': 'tab.destroy() will remove the tab from the browser.',\\n                                code: `\\nlet tabs = [\\n    { url: 'https://nyt.com' },\\n    { url: 'https://google.com' },\\n    { url: 'https://bing.com' },\\n    { url: 'https://youtube.com' }\\n];\\ntabs.forEach(async (data, i) => {\\n    data.tab = await warp.tab({ url: data.url, id: \\\"tab\\\" + i });\\n    data.tab.destroy();\\n});`\\n                            },\\n                            {\\n                                'title': 'Retrieve tab by its ID and navigate to a new URL',\\n                                'desc': 'We can retrieve a tab by using its ID as argument to warp.tab',\\n                                code: `\\nlet tab = await warp.tab({ url: \\\"https://google.com\\\", id: \\\"exampleTab\\\" });\\nlet anotherReference = await warp.tab(\\\"exampleTab\\\");\\nawait anotherReference.navigate(\\\"https://google.com/search?q=warp+browser\\\");\\n`\\n                            },\\n                            {\\n                                'title': 'Retrieve active tab and destroy it',\\n                                'desc': 'We can get the active tab ID from warp.native.activeTab.',\\n                                code: `\\nif (tabs[warp.native.activeTab]) {\\n    let activeTab = await warp.tab(warp.native.activeTab);\\n    activeTab.destroy();\\n} else {\\n    toast(\\\"No Tab is active right now\\\");\\n}\\n`\\n                            },\\n                            {\\n                                'title': 'Close all tabs',\\n                                'desc': `Warp stores everything in warp.lists.\\nTabs are in warp.lists.native.tabs`,\\n                                code: `\\neach(warp.lists.native.tabs, async function(id, tab) {   \\n    tab.destroy();\\n});\\n`\\n                            },        {\\n                                'title': 'Change agent on active tab',\\n                                'desc': `You can get or set Agent on the tab with .agent() method`,\\n                                code: `\\nlet tab = await warp.tab(warp.native.activeTab);\\ntab.agent(\\\"Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Mobile Safari/537.36\\\")\\n`\\n                            }\\n                            \\n                            \\n                        ]\\n                    },\\n                    'Evaluation and Scraping': {\\n                        drawer: false,\\n                        desc: 'With Warp, data mining tasks are offloaded to the frontend. Tabs can evaluate code through async tab.eval.',\\n                        examples: [\\n                            {\\n                                'title': 'Evaluate code in a tab',\\n                                'desc': 'tab.eval() will execute code in the tab web page context.',\\n                                code: `\\nlet tab = await warp.tab(\\\"https://google.com\\\");\\ntab.eval('alert(\\\"hello from Warp console\\\")');\\n`\\n                            },\\n                            {\\n                                'title': 'Evaluate code with return',\\n                                'desc': 'Use return to return immutable data from tab.eval. This example counts divs in a tab.',\\n                                code: `\\nlet tab = await warp.tab(\\\"https://bing.com\\\");\\nalert(await tab.eval(\\\"return document.querySelectorAll('div').length\\\"));\\n`\\n                            },\\n                            {\\n                                'title': 'Execute a function in tab context',\\n                                'desc': `We can send JS functions directly to tab.eval. \\nThis is purely for convenience while using the keyboard because the code \\nwill be more readable.\\nEval method will serialize the function and add 'return' in front so \\nthe function automatically returns.`,\\n                                code: `\\nlet tab = await warp.tab(\\\"https://nyt.com\\\");\\nfunction countDivs() { \\n    return document.querySelectorAll('div').length;\\n}\\nalert(await tab.eval(countDivs));\\n`\\n                            },\\n                            {\\n                                'title': 'Scrape Google search results',\\n                                'desc': 'Scrape Google search and show elements containing results in a Warp display.',\\n                                code: `\\nfunction scrape() {\\n    let els = document.querySelectorAll('#main h3');\\n    let res = [];\\n    els.forEach(function(el) {\\n        res.push({\\n            el: el,\\n            caption: el.textContent,\\n            text: el.textContent,\\n            url: el.parentNode.getAttribute('href'),\\n            image: el.parentNode.querySelector('img')?.getAttribute('src')\\n        });\\n    });\\n    return res;\\n}\\nlet tab = await warp.tab('https://google.com/search?q=bemjax');\\nlet code = \\\\`\\n    \\\\${ scrape.toString() }\\n    return scrape();\\n\\\\`;\\nlet result = await tab.eval(code);\\nresult = JSON.parse(result);\\ntab.destroy();\\nlet el = warp.dom.node('div');\\nresult.forEach(function(data) {\\n    let d = warp.dom.node('div', {\\n        click: function() {\\n            warp.tab(data.url);\\n        }\\n    }, { class: 'item sm m5' });\\n    d.innerHTML = \\\\`\\n        <img src=\\\"\\\\${ data.image }\\\" class=\\\"m5 ml10\\\" style=\\\"height:30px; width:30px; border-radius:15px\\\">\\n        <span class=\\\"inline-block m10\\\">\\\\${ data.caption }</span>\\n    \\\\`;\\n    el.append(d);\\n});\\nwarp.display(el);\\n`\\n                            },\\n                            {\\n                                'title': 'Google \\\"testing\\\" and open first result',\\n                                'desc': '',\\n                                code: `\\nlet tab = await warp.tab('https://google.com/search?q=testing');\\nlet code = \\\\`\\n    return document.querySelectorAll('#main h3')[0].parentNode.getAttribute('href');\\n\\\\`;\\nlet result =await tab.eval(code);\\ntab.destroy();\\nif (result) {\\n    result = JSON.parse(result;\\n    await warp.tab(result);\\n} else {\\n    toast(\\\"No results found.\\\");\\n}`\\n                            },{ \\n                                \\n                                  'title': 'Open gmail and toast last email sender',\\n                                'desc': ``,\\n                             code :`\\nlet tab = await warp.tab(\\\"https://mail.google.com/mail/u/0/\\\");\\nlet code = \\\\`\\n     let el = document.querySelectorAll('.zA')[0];\\n     //this element hold the selected,  read/notread, from(in text format ot email), title, time, first part of meil text \\n     let textAll = el.querySelector('.afn').textContent;\\n     textAll = textAll.split(\\\",\\\")\\n     //index 2 is \\\"from\\\"\\n     return {\\n             read : textAll[0],\\n             from :  textAll[1],\\n             email : el.querySelector(\\\".yP\\\").getAttribute(\\\"email\\\"),\\n             title : textAll[2],\\n             time : textAll[3],\\n             excerpt : textAll[4]\\n     }\\n\\\\`;\\nlet result = await tab.eval(code);\\nresult = JSON.parse(result);\\ntoast(\\\"The last email is from: \\\" + result.email);`\\n                            }\\n                        ]\\n                    }\\n                }\\n            },\\n            Engine: {\\n                desc: 'These examples are not Native-dependent and would work in any browser.',\\n                sets: {}\\n            }\\n        };\\n        let currentExamples = 'Native';\\n        this.inspect = function (subject) {\\n            if (!subject)\\n                return;\\n        };\\n        this.getAsTrainingSet = function () {\\n            let final = '';\\n            each(examplesData, function (inde, category) {\\n                each(category.sets, function (ind, exampleSet) {\\n                    each(exampleSet.examples, function (index, example) {\\n                        final += '\\\\n\\\\n\\\\n//' + example.title + '\\\\n/* description:' + example.desc + '\\\\n*/\\\\n' + example.code;\\n                    });\\n                });\\n            });\\n            return final;\\n        };\\n        app.init = async function () {\\n            var render = {\\n                tab: async function (tabName) {\\n                    let container = warp.dom.node('div', {}, { class: 'hidden api-' + tabName });\\n                    container.innerHTML = '<p class=\\\"tl small op7 m5\\\">' + examplesData[tabName].desc + '</p>';\\n                    each(examplesData[tabName].sets, function (setName, exampleSet) {\\n                        render.drawer(tabName, setName, exampleSet, container);\\n                    });\\n                    app.el.querySelector('.body').append(container);\\n                },\\n                drawer: function (tabName, setName, exampleSet, tabContainer) {\\n                    exampleSet.drawer = warp.gui.drawer('<strong>' + setName + '</strong> : <small class=\\\"op4\\\">' + Object.keys(exampleSet.examples).length + ' examples</small>', {\\n                        usePrefs: true,\\n                        class: 'mt0 mb0 dark',\\n                        size: 'md',\\n                        beforeOpen: function (drawer) {\\n                            drawer.body.innerHTML = '<p class=\\\"tl m5\\\">' + exampleSet.desc + '</p>';\\n                            let final = '';\\n                            let b = warp.dom.node('button', {\\n                                click: function () {\\n                                    each(exampleSet.examples, function (index, example) {\\n                                        final += '\\\\n\\\\n\\\\n//' + example.title + '\\\\n/* description:' + example.desc + '\\\\n*/\\\\n' + example.code;\\n                                    });\\n                                    warp.clipboard.write(final);\\n                                }\\n                            }, { class: 'xs fr mt-20' });\\n                            b.textContent = 'Download as plaintext';\\n                            exampleSet.drawer.body.append(b);\\n                            each(exampleSet.examples, function (index, example) {\\n                                if (index !== 'drawer') {\\n                                    drawer.body.append(render.example(example, index));\\n                                }\\n                            });\\n                        },\\n                        onClose: function (drawer) {\\n                        }\\n                    });\\n                    exampleSet.drawer.body.classList.add('p10', 'tl');\\n                    exampleSet.drawer.el.classList.add('block');\\n                    tabContainer.append(exampleSet.drawer.el);\\n                },\\n                example: function (data, index) {\\n                    let el = warp.dom.node('div', {\\n                        mouseenter: function () {\\n                            el.classList.remove('op5');\\n                        },\\n                        mouseleave: function () {\\n                            el.classList.add('op5');\\n                        },\\n                        click: function () {\\n                            warp.console.show('/*\\\\n' + data.title + '\\\\n\\\\ndescription: ' + data.desc + '\\\\n*/\\\\n\\\\n' + data.code);\\n                        }\\n                    }, {\\n                        title: 'View, edit, and execute code in console',\\n                        style: 'cursor: pointer; border-radius:3px; background-color: rgba(0,0,0,.5)',\\n                        class: 'tl small op5 mt5 mb5 p10 ripple'\\n                    });\\n                    el.innerHTML = `\\n                    <h3 class=\\\"mb0 mt5\\\"><span class=\\\"op5\\\">${ parseInt(index) + 1 }.</span> ${ data.title }</h3>\\n                    <p class=\\\"inline-block hxs\\\" style=\\\"overflow: hidden; text-overflow: ellipsis\\\">\\n                        <span class=\\\"op5\\\">DESCRIPTION: </span> ${ data.desc }\\n                    </p>`;\\n                    return el;\\n                }\\n            };\\n            function setupAppGui() {\\n                app.el.classList.add('tl');\\n                app.el.innerHTML = `\\n                <div class=\\\"tabs tl mt-10\\\">\\n                    <button class=\\\"m0 clear op4 inverted sm native\\\">Native</button>\\n                    <span style=\\\"color:rgba(255,255,255,0.4)\\\">|</span>\\n                    <button class=\\\"m0 clear op4 inverted sm engine\\\">Engine</button>\\n                    <span style=\\\"color:rgba(255,255,255,0.4)\\\">|</span>\\n                </div>\\n                <div class=\\\"body\\\"></div>\\n            `;\\n                let buttons = app.el.querySelectorAll('button');\\n                buttons.forEach(function (button) {\\n                    render.tab(button.textContent);\\n                    button.addEventListener('click', function () {\\n                        app.el.querySelector('.body .api-' + currentExamples).classList.add('hidden');\\n                        app.el.querySelector('button.' + currentExamples.toLowerCase()).classList.add('op4');\\n                        currentExamples = button.textContent;\\n                        app.el.querySelector('.body .api-' + button.textContent).classList.remove('hidden');\\n                        button.classList.remove('op4');\\n                    });\\n                });\\n                buttons[0].click();\\n                app.el.classList.add('p10');\\n                app.win.width(400);\\n                app.win.height(700);\\n                app.show();\\n                app.win.restore();\\n                app.win.el.classList.remove('inspector');\\n            }\\n            setupAppGui();\\n        };\\n    }\""
            }
        }
    },
    "brands": {},
    "fileTypes": {},
    "events": {
        "beforeLoad": "@function:function beforeLoad(layout){}",
        "onLoad": "@function:async function onLoad(layout) {\n    window.setupWin = function setupWin(app) {\n        app.el.classList.add('tl');\n        function background(c) {\n            app.win.el.style.backgroundColor = c;\n            app.win.content.style.backgroundColor = c;\n            app.win.body.style.backgroundColor = c;\n        }\n        app.el.classList.add('p10');\n        app.win.width(400);\n        app.win.height(600);\n     //   background('rgb(25,25,25)');\n        app.win.restore();\n        app.win.options(\"backdropCloses\", false);\n        app.win.options(\"close\", true);\n        app.win.options(\"activateOnShow\", true);\n        app.show();\n        app.win.el.classList.remove('inspector');\n    }\n    warp.invoke('Installation', 'UpdateAvailable', []).then(result => {\n        if (result) {\n            warp.invoke('Installation', 'UpdateVersion', []).then(version => {\n                alert('Please wait, downloading update to version ' + version);\n            });\n            warp.invoke(\"Installation\", \"Update\", [])\n        }\n    });\n    main.profile = new Profile();\n    main.preferences = new Preferences();\n}"
    }
}